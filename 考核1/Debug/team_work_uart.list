
team_work_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003444  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003550  08003550  00013550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035c8  080035c8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080035c8  080035c8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080035c8  080035c8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080035d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000005c  0800362c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800362c  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007934  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f0  00000000  00000000  000279fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  000293f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000054b  00000000  00000000  00029af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001730c  00000000  00000000  0002a043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009f33  00000000  00000000  0004134f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000821b0  00000000  00000000  0004b282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f44  00000000  00000000  000cd434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000cf378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003538 	.word	0x08003538

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003538 	.word	0x08003538

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b10      	ldr	r3, [pc, #64]	; (80001a4 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0f      	ldr	r2, [pc, #60]	; (80001a4 <MX_DMA_Init+0x48>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b0d      	ldr	r3, [pc, #52]	; (80001a4 <MX_DMA_Init+0x48>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200e      	movs	r0, #14
 8000180:	f000 fc69 	bl	8000a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000184:	200e      	movs	r0, #14
 8000186:	f000 fc82 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800018a:	2200      	movs	r2, #0
 800018c:	2100      	movs	r1, #0
 800018e:	200f      	movs	r0, #15
 8000190:	f000 fc61 	bl	8000a56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000194:	200f      	movs	r0, #15
 8000196:	f000 fc7a 	bl	8000a8e <HAL_NVIC_EnableIRQ>

}
 800019a:	bf00      	nop
 800019c:	3708      	adds	r7, #8
 800019e:	46bd      	mov	sp, r7
 80001a0:	bd80      	pop	{r7, pc}
 80001a2:	bf00      	nop
 80001a4:	40021000 	.word	0x40021000

080001a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b086      	sub	sp, #24
 80001ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ae:	f107 0308 	add.w	r3, r7, #8
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
 80001b6:	605a      	str	r2, [r3, #4]
 80001b8:	609a      	str	r2, [r3, #8]
 80001ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <MX_GPIO_Init+0x74>)
 80001be:	699b      	ldr	r3, [r3, #24]
 80001c0:	4a16      	ldr	r2, [pc, #88]	; (800021c <MX_GPIO_Init+0x74>)
 80001c2:	f043 0320 	orr.w	r3, r3, #32
 80001c6:	6193      	str	r3, [r2, #24]
 80001c8:	4b14      	ldr	r3, [pc, #80]	; (800021c <MX_GPIO_Init+0x74>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	f003 0320 	and.w	r3, r3, #32
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <MX_GPIO_Init+0x74>)
 80001d6:	699b      	ldr	r3, [r3, #24]
 80001d8:	4a10      	ldr	r2, [pc, #64]	; (800021c <MX_GPIO_Init+0x74>)
 80001da:	f043 0304 	orr.w	r3, r3, #4
 80001de:	6193      	str	r3, [r2, #24]
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <MX_GPIO_Init+0x74>)
 80001e2:	699b      	ldr	r3, [r3, #24]
 80001e4:	f003 0304 	and.w	r3, r3, #4
 80001e8:	603b      	str	r3, [r7, #0]
 80001ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2101      	movs	r1, #1
 80001f0:	480b      	ldr	r0, [pc, #44]	; (8000220 <MX_GPIO_Init+0x78>)
 80001f2:	f001 f88d 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001f6:	2301      	movs	r3, #1
 80001f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001fa:	2301      	movs	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001fe:	2300      	movs	r3, #0
 8000200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000202:	2301      	movs	r3, #1
 8000204:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	4619      	mov	r1, r3
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <MX_GPIO_Init+0x78>)
 800020e:	f000 fefb 	bl	8001008 <HAL_GPIO_Init>

}
 8000212:	bf00      	nop
 8000214:	3718      	adds	r7, #24
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40021000 	.word	0x40021000
 8000220:	40010800 	.word	0x40010800

08000224 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	807b      	strh	r3, [r7, #2]
	if(huart == &huart1)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a25      	ldr	r2, [pc, #148]	; (80002c8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d143      	bne.n	80002c0 <HAL_UARTEx_RxEventCallback+0x9c>
	{
		Printf("Sume:%d\r Content:",Size);
 8000238:	887b      	ldrh	r3, [r7, #2]
 800023a:	4619      	mov	r1, r3
 800023c:	4823      	ldr	r0, [pc, #140]	; (80002cc <HAL_UARTEx_RxEventCallback+0xa8>)
 800023e:	f000 f967 	bl	8000510 <Printf>

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) ReceiveData, sizeof(ReceiveData));//开启DMA
 8000242:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000246:	4922      	ldr	r1, [pc, #136]	; (80002d0 <HAL_UARTEx_RxEventCallback+0xac>)
 8000248:	481f      	ldr	r0, [pc, #124]	; (80002c8 <HAL_UARTEx_RxEventCallback+0xa4>)
 800024a:	f001 fd63 	bl	8001d14 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);//关闭 DMA半完成通道，以防数据传输一半就进入中断回调函数。
 800024e:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f022 0204 	bic.w	r2, r2, #4
 800025c:	601a      	str	r2, [r3, #0]

		HAL_UART_Transmit_DMA(&huart1, (uint8_t *)ReceiveData, Size);//发送接收到的数据
 800025e:	887b      	ldrh	r3, [r7, #2]
 8000260:	461a      	mov	r2, r3
 8000262:	491b      	ldr	r1, [pc, #108]	; (80002d0 <HAL_UARTEx_RxEventCallback+0xac>)
 8000264:	4818      	ldr	r0, [pc, #96]	; (80002c8 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000266:	f001 fce5 	bl	8001c34 <HAL_UART_Transmit_DMA>



		//数据校验模式：  启始：AA + 数据量 + 数据内容 + 和校验 + 终止位：FF
		//例子： AA0601FFAFFF(代表01号小灯亮起)
		if(ReceiveData[0] == 0xAA)
 800026a:	4b19      	ldr	r3, [pc, #100]	; (80002d0 <HAL_UARTEx_RxEventCallback+0xac>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	2baa      	cmp	r3, #170	; 0xaa
 8000270:	d126      	bne.n	80002c0 <HAL_UARTEx_RxEventCallback+0x9c>
		{
			if(ReceiveData[1] == 0x06)
 8000272:	4b17      	ldr	r3, [pc, #92]	; (80002d0 <HAL_UARTEx_RxEventCallback+0xac>)
 8000274:	785b      	ldrb	r3, [r3, #1]
 8000276:	2b06      	cmp	r3, #6
 8000278:	d122      	bne.n	80002c0 <HAL_UARTEx_RxEventCallback+0x9c>
			{
				for( i = 2 ; i< Size -2 ; i+=2)
 800027a:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <HAL_UARTEx_RxEventCallback+0xb4>)
 800027c:	2202      	movs	r2, #2
 800027e:	801a      	strh	r2, [r3, #0]
 8000280:	e017      	b.n	80002b2 <HAL_UARTEx_RxEventCallback+0x8e>
				{
					if(ReceiveData[i] == 0x01 && ReceiveData[i+1] == 0xFF)
 8000282:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	4b11      	ldr	r3, [pc, #68]	; (80002d0 <HAL_UARTEx_RxEventCallback+0xac>)
 800028a:	5c9b      	ldrb	r3, [r3, r2]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d10a      	bne.n	80002a6 <HAL_UARTEx_RxEventCallback+0x82>
 8000290:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	3301      	adds	r3, #1
 8000296:	4a0e      	ldr	r2, [pc, #56]	; (80002d0 <HAL_UARTEx_RxEventCallback+0xac>)
 8000298:	5cd3      	ldrb	r3, [r2, r3]
 800029a:	2bff      	cmp	r3, #255	; 0xff
 800029c:	d103      	bne.n	80002a6 <HAL_UARTEx_RxEventCallback+0x82>
					{
						HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800029e:	2101      	movs	r1, #1
 80002a0:	480e      	ldr	r0, [pc, #56]	; (80002dc <HAL_UARTEx_RxEventCallback+0xb8>)
 80002a2:	f001 f84d 	bl	8001340 <HAL_GPIO_TogglePin>
				for( i = 2 ; i< Size -2 ; i+=2)
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <HAL_UARTEx_RxEventCallback+0xb4>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	3302      	adds	r3, #2
 80002ac:	b29a      	uxth	r2, r3
 80002ae:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <HAL_UARTEx_RxEventCallback+0xb4>)
 80002b0:	801a      	strh	r2, [r3, #0]
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <HAL_UARTEx_RxEventCallback+0xb4>)
 80002b4:	881b      	ldrh	r3, [r3, #0]
 80002b6:	461a      	mov	r2, r3
 80002b8:	887b      	ldrh	r3, [r7, #2]
 80002ba:	3b02      	subs	r3, #2
 80002bc:	429a      	cmp	r2, r3
 80002be:	dbe0      	blt.n	8000282 <HAL_UARTEx_RxEventCallback+0x5e>
				}
			}
		}

	}
}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000180 	.word	0x20000180
 80002cc:	08003550 	.word	0x08003550
 80002d0:	20000078 	.word	0x20000078
 80002d4:	200001c8 	.word	0x200001c8
 80002d8:	20000178 	.word	0x20000178
 80002dc:	40010800 	.word	0x40010800

080002e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fa5a 	bl	800079c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e8:	f000 f824 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ec:	f7ff ff5c 	bl	80001a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80002f0:	f7ff ff34 	bl	800015c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80002f4:	f000 f958 	bl	80005a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1,(uint8_t *) ReceiveData, sizeof(ReceiveData));//开启DMA
 80002f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002fc:	4909      	ldr	r1, [pc, #36]	; (8000324 <main+0x44>)
 80002fe:	480a      	ldr	r0, [pc, #40]	; (8000328 <main+0x48>)
 8000300:	f001 fd08 	bl	8001d14 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);//关闭 DMA半完成通道，以防数据传输一半就进入中断回调函数
 8000304:	4b09      	ldr	r3, [pc, #36]	; (800032c <main+0x4c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <main+0x4c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f022 0204 	bic.w	r2, r2, #4
 8000312:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Printf("1");
 8000314:	4806      	ldr	r0, [pc, #24]	; (8000330 <main+0x50>)
 8000316:	f000 f8fb 	bl	8000510 <Printf>
	  HAL_Delay(1000);
 800031a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031e:	f000 fa9f 	bl	8000860 <HAL_Delay>
	  Printf("1");
 8000322:	e7f7      	b.n	8000314 <main+0x34>
 8000324:	20000078 	.word	0x20000078
 8000328:	20000180 	.word	0x20000180
 800032c:	200001c8 	.word	0x200001c8
 8000330:	08003564 	.word	0x08003564

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	; 0x40
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	2228      	movs	r2, #40	; 0x28
 8000340:	2100      	movs	r1, #0
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fc66 	bl	8002c14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000356:	2301      	movs	r3, #1
 8000358:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800035a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800035e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000360:	2300      	movs	r3, #0
 8000362:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000364:	2301      	movs	r3, #1
 8000366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000368:	2302      	movs	r3, #2
 800036a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800036c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000370:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000372:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000376:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fff9 	bl	8001374 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000388:	f000 f819 	bl	80003be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000390:	2302      	movs	r3, #2
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000398:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800039c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2102      	movs	r1, #2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fa66 	bl	8001878 <HAL_RCC_ClockConfig>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003b2:	f000 f804 	bl	80003be <Error_Handler>
  }
}
 80003b6:	bf00      	nop
 80003b8:	3740      	adds	r7, #64	; 0x40
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c2:	b672      	cpsid	i
}
 80003c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c6:	e7fe      	b.n	80003c6 <Error_Handler+0x8>

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <HAL_MspInit+0x40>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <HAL_MspInit+0x40>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <HAL_MspInit+0x40>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <HAL_MspInit+0x40>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a07      	ldr	r2, [pc, #28]	; (8000408 <HAL_MspInit+0x40>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <HAL_MspInit+0x40>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <NMI_Handler+0x4>

08000412 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000416:	e7fe      	b.n	8000416 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	e7fe      	b.n	800041c <MemManage_Handler+0x4>

0800041e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000422:	e7fe      	b.n	8000422 <BusFault_Handler+0x4>

08000424 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000428:	e7fe      	b.n	8000428 <UsageFault_Handler+0x4>

0800042a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800043a:	bf00      	nop
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr

08000442 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr

0800044e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800044e:	b580      	push	{r7, lr}
 8000450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000452:	f000 f9e9 	bl	8000828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	bd80      	pop	{r7, pc}
	...

0800045c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000460:	4802      	ldr	r0, [pc, #8]	; (800046c <DMA1_Channel4_IRQHandler+0x10>)
 8000462:	f000 fc9d 	bl	8000da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000020c 	.word	0x2000020c

08000470 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000474:	4802      	ldr	r0, [pc, #8]	; (8000480 <DMA1_Channel5_IRQHandler+0x10>)
 8000476:	f000 fc93 	bl	8000da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200001c8 	.word	0x200001c8

08000484 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <USART1_IRQHandler+0x10>)
 800048a:	f001 fca1 	bl	8001dd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	20000180 	.word	0x20000180

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	; (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	; (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	; (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	; (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	; (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f002 fbac 	bl	8002c24 <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	; (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20005000 	.word	0x20005000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	2000017c 	.word	0x2000017c
 8000500:	200003a0 	.word	0x200003a0

08000504 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000508:	bf00      	nop
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <Printf>:

/* USER CODE BEGIN 0 */


void Printf (char * fmt,...)
{
 8000510:	b40f      	push	{r0, r1, r2, r3}
 8000512:	b590      	push	{r4, r7, lr}
 8000514:	b0c3      	sub	sp, #268	; 0x10c
 8000516:	af00      	add	r7, sp, #0
	uint8_t tempbuff[256];
	uint16_t i;
	va_list ap;
	va_start(ap,fmt);
 8000518:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800051c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000524:	601a      	str	r2, [r3, #0]
	vsprintf((char *)tempbuff,fmt,ap);
 8000526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800052a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800052e:	1d38      	adds	r0, r7, #4
 8000530:	681a      	ldr	r2, [r3, #0]
 8000532:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8000536:	f002 fb63 	bl	8002c00 <vsiprintf>
	va_end(ap);

	for(i=0;i<strlen((char *)tempbuff);i++)
 800053a:	2300      	movs	r3, #0
 800053c:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 8000540:	e016      	b.n	8000570 <Printf+0x60>
	{
		while(!(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TXE)));//发送寄存器一旦发送完毕，返回ture值，所以取反
 8000542:	bf00      	nop
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <Printf+0x94>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	2b80      	cmp	r3, #128	; 0x80
 8000550:	d1f8      	bne.n	8000544 <Printf+0x34>
		huart1.Instance->DR = tempbuff[i];
 8000552:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 8000556:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800055a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800055e:	5cd2      	ldrb	r2, [r2, r3]
 8000560:	4b10      	ldr	r3, [pc, #64]	; (80005a4 <Printf+0x94>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
	for(i=0;i<strlen((char *)tempbuff);i++)
 8000566:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 800056a:	3301      	adds	r3, #1
 800056c:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 8000570:	f8b7 4106 	ldrh.w	r4, [r7, #262]	; 0x106
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff fde8 	bl	800014c <strlen>
 800057c:	4603      	mov	r3, r0
 800057e:	429c      	cmp	r4, r3
 8000580:	d3df      	bcc.n	8000542 <Printf+0x32>
	}
	while(!(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_TC)));
 8000582:	bf00      	nop
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <Printf+0x94>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800058e:	2b40      	cmp	r3, #64	; 0x40
 8000590:	d1f8      	bne.n	8000584 <Printf+0x74>

}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800059a:	46bd      	mov	sp, r7
 800059c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80005a0:	b004      	add	sp, #16
 80005a2:	4770      	bx	lr
 80005a4:	20000180 	.word	0x20000180

080005a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005ac:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <MX_USART1_UART_Init+0x50>)
 80005b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005c0:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005c6:	4b0b      	ldr	r3, [pc, #44]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005ce:	220c      	movs	r2, #12
 80005d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d2:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	4b06      	ldr	r3, [pc, #24]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_USART1_UART_Init+0x4c>)
 80005e0:	f001 fad8 	bl	8001b94 <HAL_UART_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ea:	f7ff fee8 	bl	80003be <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000180 	.word	0x20000180
 80005f8:	40013800 	.word	0x40013800

080005fc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a47      	ldr	r2, [pc, #284]	; (8000734 <HAL_UART_MspInit+0x138>)
 8000618:	4293      	cmp	r3, r2
 800061a:	f040 8086 	bne.w	800072a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800061e:	4b46      	ldr	r3, [pc, #280]	; (8000738 <HAL_UART_MspInit+0x13c>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4a45      	ldr	r2, [pc, #276]	; (8000738 <HAL_UART_MspInit+0x13c>)
 8000624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000628:	6193      	str	r3, [r2, #24]
 800062a:	4b43      	ldr	r3, [pc, #268]	; (8000738 <HAL_UART_MspInit+0x13c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <HAL_UART_MspInit+0x13c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	4a3f      	ldr	r2, [pc, #252]	; (8000738 <HAL_UART_MspInit+0x13c>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <HAL_UART_MspInit+0x13c>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000654:	2302      	movs	r3, #2
 8000656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000658:	2303      	movs	r3, #3
 800065a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4836      	ldr	r0, [pc, #216]	; (800073c <HAL_UART_MspInit+0x140>)
 8000664:	f000 fcd0 	bl	8001008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800066c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	482f      	ldr	r0, [pc, #188]	; (800073c <HAL_UART_MspInit+0x140>)
 800067e:	f000 fcc3 	bl	8001008 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <HAL_UART_MspInit+0x144>)
 8000684:	4a2f      	ldr	r2, [pc, #188]	; (8000744 <HAL_UART_MspInit+0x148>)
 8000686:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000688:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <HAL_UART_MspInit+0x144>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <HAL_UART_MspInit+0x144>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000694:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <HAL_UART_MspInit+0x144>)
 8000696:	2280      	movs	r2, #128	; 0x80
 8000698:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800069a:	4b29      	ldr	r3, [pc, #164]	; (8000740 <HAL_UART_MspInit+0x144>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006a0:	4b27      	ldr	r3, [pc, #156]	; (8000740 <HAL_UART_MspInit+0x144>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <HAL_UART_MspInit+0x144>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80006ac:	4b24      	ldr	r3, [pc, #144]	; (8000740 <HAL_UART_MspInit+0x144>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80006b2:	4823      	ldr	r0, [pc, #140]	; (8000740 <HAL_UART_MspInit+0x144>)
 80006b4:	f000 fa06 	bl	8000ac4 <HAL_DMA_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80006be:	f7ff fe7e 	bl	80003be <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4a1e      	ldr	r2, [pc, #120]	; (8000740 <HAL_UART_MspInit+0x144>)
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006c8:	4a1d      	ldr	r2, [pc, #116]	; (8000740 <HAL_UART_MspInit+0x144>)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80006ce:	4b1e      	ldr	r3, [pc, #120]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006d0:	4a1e      	ldr	r2, [pc, #120]	; (800074c <HAL_UART_MspInit+0x150>)
 80006d2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006d4:	4b1c      	ldr	r3, [pc, #112]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006d6:	2210      	movs	r2, #16
 80006d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006da:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006e0:	4b19      	ldr	r3, [pc, #100]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006e2:	2280      	movs	r2, #128	; 0x80
 80006e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006ec:	4b16      	ldr	r3, [pc, #88]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80006f2:	4b15      	ldr	r3, [pc, #84]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006f8:	4b13      	ldr	r3, [pc, #76]	; (8000748 <HAL_UART_MspInit+0x14c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80006fe:	4812      	ldr	r0, [pc, #72]	; (8000748 <HAL_UART_MspInit+0x14c>)
 8000700:	f000 f9e0 	bl	8000ac4 <HAL_DMA_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800070a:	f7ff fe58 	bl	80003be <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <HAL_UART_MspInit+0x14c>)
 8000712:	639a      	str	r2, [r3, #56]	; 0x38
 8000714:	4a0c      	ldr	r2, [pc, #48]	; (8000748 <HAL_UART_MspInit+0x14c>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	2025      	movs	r0, #37	; 0x25
 8000720:	f000 f999 	bl	8000a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000724:	2025      	movs	r0, #37	; 0x25
 8000726:	f000 f9b2 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800072a:	bf00      	nop
 800072c:	3720      	adds	r7, #32
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40013800 	.word	0x40013800
 8000738:	40021000 	.word	0x40021000
 800073c:	40010800 	.word	0x40010800
 8000740:	200001c8 	.word	0x200001c8
 8000744:	40020058 	.word	0x40020058
 8000748:	2000020c 	.word	0x2000020c
 800074c:	40020044 	.word	0x40020044

08000750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000750:	f7ff fed8 	bl	8000504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000756:	490c      	ldr	r1, [pc, #48]	; (8000788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000758:	4a0c      	ldr	r2, [pc, #48]	; (800078c <LoopFillZerobss+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800076c:	4c09      	ldr	r4, [pc, #36]	; (8000794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800077a:	f002 fa59 	bl	8002c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fdaf 	bl	80002e0 <main>
  bx lr
 8000782:	4770      	bx	lr
  ldr r0, =_sdata
 8000784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000788:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800078c:	080035d0 	.word	0x080035d0
  ldr r2, =_sbss
 8000790:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000794:	2000039c 	.word	0x2000039c

08000798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000798:	e7fe      	b.n	8000798 <ADC1_2_IRQHandler>
	...

0800079c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_Init+0x28>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a07      	ldr	r2, [pc, #28]	; (80007c4 <HAL_Init+0x28>)
 80007a6:	f043 0310 	orr.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007ac:	2003      	movs	r0, #3
 80007ae:	f000 f947 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007b2:	200f      	movs	r0, #15
 80007b4:	f000 f808 	bl	80007c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b8:	f7ff fe06 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007bc:	2300      	movs	r3, #0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40022000 	.word	0x40022000

080007c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007d0:	4b12      	ldr	r3, [pc, #72]	; (800081c <HAL_InitTick+0x54>)
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <HAL_InitTick+0x58>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4619      	mov	r1, r3
 80007da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007de:	fbb3 f3f1 	udiv	r3, r3, r1
 80007e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f95f 	bl	8000aaa <HAL_SYSTICK_Config>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e00e      	b.n	8000814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	d80a      	bhi.n	8000812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007fc:	2200      	movs	r2, #0
 80007fe:	6879      	ldr	r1, [r7, #4]
 8000800:	f04f 30ff 	mov.w	r0, #4294967295
 8000804:	f000 f927 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000808:	4a06      	ldr	r2, [pc, #24]	; (8000824 <HAL_InitTick+0x5c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800080e:	2300      	movs	r3, #0
 8000810:	e000      	b.n	8000814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000000 	.word	0x20000000
 8000820:	20000008 	.word	0x20000008
 8000824:	20000004 	.word	0x20000004

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	20000250 	.word	0x20000250

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000250 	.word	0x20000250

08000860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000868:	f7ff fff0 	bl	800084c <HAL_GetTick>
 800086c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000878:	d005      	beq.n	8000886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_Delay+0x44>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	4413      	add	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000886:	bf00      	nop
 8000888:	f7ff ffe0 	bl	800084c <HAL_GetTick>
 800088c:	4602      	mov	r2, r0
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	429a      	cmp	r2, r3
 8000896:	d8f7      	bhi.n	8000888 <HAL_Delay+0x28>
  {
  }
}
 8000898:	bf00      	nop
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000008 	.word	0x20000008

080008a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008be:	68ba      	ldr	r2, [r7, #8]
 80008c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008c4:	4013      	ands	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008da:	4a04      	ldr	r2, [pc, #16]	; (80008ec <__NVIC_SetPriorityGrouping+0x44>)
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	60d3      	str	r3, [r2, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008f4:	4b04      	ldr	r3, [pc, #16]	; (8000908 <__NVIC_GetPriorityGrouping+0x18>)
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	f003 0307 	and.w	r3, r3, #7
}
 80008fe:	4618      	mov	r0, r3
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	2b00      	cmp	r3, #0
 800091c:	db0b      	blt.n	8000936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	f003 021f 	and.w	r2, r3, #31
 8000924:	4906      	ldr	r1, [pc, #24]	; (8000940 <__NVIC_EnableIRQ+0x34>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	095b      	lsrs	r3, r3, #5
 800092c:	2001      	movs	r0, #1
 800092e:	fa00 f202 	lsl.w	r2, r0, r2
 8000932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr
 8000940:	e000e100 	.word	0xe000e100

08000944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	6039      	str	r1, [r7, #0]
 800094e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	2b00      	cmp	r3, #0
 8000956:	db0a      	blt.n	800096e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	b2da      	uxtb	r2, r3
 800095c:	490c      	ldr	r1, [pc, #48]	; (8000990 <__NVIC_SetPriority+0x4c>)
 800095e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000962:	0112      	lsls	r2, r2, #4
 8000964:	b2d2      	uxtb	r2, r2
 8000966:	440b      	add	r3, r1
 8000968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800096c:	e00a      	b.n	8000984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	b2da      	uxtb	r2, r3
 8000972:	4908      	ldr	r1, [pc, #32]	; (8000994 <__NVIC_SetPriority+0x50>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	f003 030f 	and.w	r3, r3, #15
 800097a:	3b04      	subs	r3, #4
 800097c:	0112      	lsls	r2, r2, #4
 800097e:	b2d2      	uxtb	r2, r2
 8000980:	440b      	add	r3, r1
 8000982:	761a      	strb	r2, [r3, #24]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000e100 	.word	0xe000e100
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000998:	b480      	push	{r7}
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	f003 0307 	and.w	r3, r3, #7
 80009aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	f1c3 0307 	rsb	r3, r3, #7
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	bf28      	it	cs
 80009b6:	2304      	movcs	r3, #4
 80009b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	3304      	adds	r3, #4
 80009be:	2b06      	cmp	r3, #6
 80009c0:	d902      	bls.n	80009c8 <NVIC_EncodePriority+0x30>
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	3b03      	subs	r3, #3
 80009c6:	e000      	b.n	80009ca <NVIC_EncodePriority+0x32>
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009cc:	f04f 32ff 	mov.w	r2, #4294967295
 80009d0:	69bb      	ldr	r3, [r7, #24]
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43da      	mvns	r2, r3
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	401a      	ands	r2, r3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009e0:	f04f 31ff 	mov.w	r1, #4294967295
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	43d9      	mvns	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	4313      	orrs	r3, r2
         );
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3724      	adds	r7, #36	; 0x24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff90 	bl	8000944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff2d 	bl	80008a8 <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff42 	bl	80008f0 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff90 	bl	8000998 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5f 	bl	8000944 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff35 	bl	800090c <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa2 	bl	80009fc <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d101      	bne.n	8000ada <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e043      	b.n	8000b62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <HAL_DMA_Init+0xa8>)
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <HAL_DMA_Init+0xac>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	091b      	lsrs	r3, r3, #4
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <HAL_DMA_Init+0xb0>)
 8000af6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2202      	movs	r2, #2
 8000afc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000b0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	68db      	ldr	r3, [r3, #12]
 8000b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	695b      	ldr	r3, [r3, #20]
 8000b2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3714      	adds	r7, #20
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	bffdfff8 	.word	0xbffdfff8
 8000b70:	cccccccd 	.word	0xcccccccd
 8000b74:	40020000 	.word	0x40020000

08000b78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b86:	2300      	movs	r3, #0
 8000b88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d101      	bne.n	8000b98 <HAL_DMA_Start_IT+0x20>
 8000b94:	2302      	movs	r3, #2
 8000b96:	e04b      	b.n	8000c30 <HAL_DMA_Start_IT+0xb8>
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d13a      	bne.n	8000c22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2202      	movs	r2, #2
 8000bb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 0201 	bic.w	r2, r2, #1
 8000bc8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	687a      	ldr	r2, [r7, #4]
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	68f8      	ldr	r0, [r7, #12]
 8000bd2:	f000 f9eb 	bl	8000fac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d008      	beq.n	8000bf0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 020e 	orr.w	r2, r2, #14
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e00f      	b.n	8000c10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 0204 	bic.w	r2, r2, #4
 8000bfe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f042 020a 	orr.w	r2, r2, #10
 8000c0e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f042 0201 	orr.w	r2, r2, #1
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	e005      	b.n	8000c2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d008      	beq.n	8000c62 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2204      	movs	r2, #4
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e020      	b.n	8000ca4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 020e 	bic.w	r2, r2, #14
 8000c70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d005      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2204      	movs	r2, #4
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e051      	b.n	8000d78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f022 020e 	bic.w	r2, r2, #14
 8000ce2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f022 0201 	bic.w	r2, r2, #1
 8000cf2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <HAL_DMA_Abort_IT+0xd4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d029      	beq.n	8000d52 <HAL_DMA_Abort_IT+0xa2>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <HAL_DMA_Abort_IT+0xd8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d022      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x9e>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <HAL_DMA_Abort_IT+0xdc>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d01a      	beq.n	8000d48 <HAL_DMA_Abort_IT+0x98>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <HAL_DMA_Abort_IT+0xe0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d012      	beq.n	8000d42 <HAL_DMA_Abort_IT+0x92>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a1c      	ldr	r2, [pc, #112]	; (8000d94 <HAL_DMA_Abort_IT+0xe4>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d00a      	beq.n	8000d3c <HAL_DMA_Abort_IT+0x8c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1b      	ldr	r2, [pc, #108]	; (8000d98 <HAL_DMA_Abort_IT+0xe8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d102      	bne.n	8000d36 <HAL_DMA_Abort_IT+0x86>
 8000d30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d34:	e00e      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d36:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d3a:	e00b      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d40:	e008      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d46:	e005      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	e002      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d4e:	2310      	movs	r3, #16
 8000d50:	e000      	b.n	8000d54 <HAL_DMA_Abort_IT+0xa4>
 8000d52:	2301      	movs	r3, #1
 8000d54:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <HAL_DMA_Abort_IT+0xec>)
 8000d56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	4798      	blx	r3
    } 
  }
  return status;
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020008 	.word	0x40020008
 8000d88:	4002001c 	.word	0x4002001c
 8000d8c:	40020030 	.word	0x40020030
 8000d90:	40020044 	.word	0x40020044
 8000d94:	40020058 	.word	0x40020058
 8000d98:	4002006c 	.word	0x4002006c
 8000d9c:	40020000 	.word	0x40020000

08000da0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d04f      	beq.n	8000e68 <HAL_DMA_IRQHandler+0xc8>
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	f003 0304 	and.w	r3, r3, #4
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d04a      	beq.n	8000e68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0320 	and.w	r3, r3, #32
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d107      	bne.n	8000df0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0204 	bic.w	r2, r2, #4
 8000dee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a66      	ldr	r2, [pc, #408]	; (8000f90 <HAL_DMA_IRQHandler+0x1f0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d029      	beq.n	8000e4e <HAL_DMA_IRQHandler+0xae>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a65      	ldr	r2, [pc, #404]	; (8000f94 <HAL_DMA_IRQHandler+0x1f4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d022      	beq.n	8000e4a <HAL_DMA_IRQHandler+0xaa>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a63      	ldr	r2, [pc, #396]	; (8000f98 <HAL_DMA_IRQHandler+0x1f8>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01a      	beq.n	8000e44 <HAL_DMA_IRQHandler+0xa4>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a62      	ldr	r2, [pc, #392]	; (8000f9c <HAL_DMA_IRQHandler+0x1fc>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d012      	beq.n	8000e3e <HAL_DMA_IRQHandler+0x9e>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a60      	ldr	r2, [pc, #384]	; (8000fa0 <HAL_DMA_IRQHandler+0x200>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d00a      	beq.n	8000e38 <HAL_DMA_IRQHandler+0x98>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a5f      	ldr	r2, [pc, #380]	; (8000fa4 <HAL_DMA_IRQHandler+0x204>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d102      	bne.n	8000e32 <HAL_DMA_IRQHandler+0x92>
 8000e2c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e30:	e00e      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e32:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000e36:	e00b      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000e3c:	e008      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e42:	e005      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e48:	e002      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e4a:	2340      	movs	r3, #64	; 0x40
 8000e4c:	e000      	b.n	8000e50 <HAL_DMA_IRQHandler+0xb0>
 8000e4e:	2304      	movs	r3, #4
 8000e50:	4a55      	ldr	r2, [pc, #340]	; (8000fa8 <HAL_DMA_IRQHandler+0x208>)
 8000e52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f000 8094 	beq.w	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e66:	e08e      	b.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	409a      	lsls	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d056      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x186>
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d051      	beq.n	8000f26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10b      	bne.n	8000ea8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 020a 	bic.w	r2, r2, #10
 8000e9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a38      	ldr	r2, [pc, #224]	; (8000f90 <HAL_DMA_IRQHandler+0x1f0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d029      	beq.n	8000f06 <HAL_DMA_IRQHandler+0x166>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a37      	ldr	r2, [pc, #220]	; (8000f94 <HAL_DMA_IRQHandler+0x1f4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d022      	beq.n	8000f02 <HAL_DMA_IRQHandler+0x162>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <HAL_DMA_IRQHandler+0x1f8>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01a      	beq.n	8000efc <HAL_DMA_IRQHandler+0x15c>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a34      	ldr	r2, [pc, #208]	; (8000f9c <HAL_DMA_IRQHandler+0x1fc>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d012      	beq.n	8000ef6 <HAL_DMA_IRQHandler+0x156>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a32      	ldr	r2, [pc, #200]	; (8000fa0 <HAL_DMA_IRQHandler+0x200>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00a      	beq.n	8000ef0 <HAL_DMA_IRQHandler+0x150>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <HAL_DMA_IRQHandler+0x204>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d102      	bne.n	8000eea <HAL_DMA_IRQHandler+0x14a>
 8000ee4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ee8:	e00e      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000eee:	e00b      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000ef0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef4:	e008      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000ef6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efa:	e005      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000efc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f00:	e002      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000f02:	2320      	movs	r3, #32
 8000f04:	e000      	b.n	8000f08 <HAL_DMA_IRQHandler+0x168>
 8000f06:	2302      	movs	r3, #2
 8000f08:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_DMA_IRQHandler+0x208>)
 8000f0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d034      	beq.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000f24:	e02f      	b.n	8000f86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d028      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d023      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f022 020e 	bic.w	r2, r2, #14
 8000f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2201      	movs	r2, #1
 8000f64:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d004      	beq.n	8000f88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	4798      	blx	r3
    }
  }
  return;
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
}
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40020008 	.word	0x40020008
 8000f94:	4002001c 	.word	0x4002001c
 8000f98:	40020030 	.word	0x40020030
 8000f9c:	40020044 	.word	0x40020044
 8000fa0:	40020058 	.word	0x40020058
 8000fa4:	4002006c 	.word	0x4002006c
 8000fa8:	40020000 	.word	0x40020000

08000fac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b10      	cmp	r3, #16
 8000fd8:	d108      	bne.n	8000fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000fea:	e007      	b.n	8000ffc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	68ba      	ldr	r2, [r7, #8]
 8000ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	60da      	str	r2, [r3, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
	...

08001008 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001008:	b480      	push	{r7}
 800100a:	b08b      	sub	sp, #44	; 0x2c
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101a:	e169      	b.n	80012f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800101c:	2201      	movs	r2, #1
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8158 	bne.w	80012ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a9a      	ldr	r2, [pc, #616]	; (80012a8 <HAL_GPIO_Init+0x2a0>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d05e      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001044:	4a98      	ldr	r2, [pc, #608]	; (80012a8 <HAL_GPIO_Init+0x2a0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d875      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800104a:	4a98      	ldr	r2, [pc, #608]	; (80012ac <HAL_GPIO_Init+0x2a4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d058      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001050:	4a96      	ldr	r2, [pc, #600]	; (80012ac <HAL_GPIO_Init+0x2a4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d86f      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001056:	4a96      	ldr	r2, [pc, #600]	; (80012b0 <HAL_GPIO_Init+0x2a8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d052      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 800105c:	4a94      	ldr	r2, [pc, #592]	; (80012b0 <HAL_GPIO_Init+0x2a8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d869      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001062:	4a94      	ldr	r2, [pc, #592]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d04c      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001068:	4a92      	ldr	r2, [pc, #584]	; (80012b4 <HAL_GPIO_Init+0x2ac>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d863      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800106e:	4a92      	ldr	r2, [pc, #584]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d046      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
 8001074:	4a90      	ldr	r2, [pc, #576]	; (80012b8 <HAL_GPIO_Init+0x2b0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d85d      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 800107a:	2b12      	cmp	r3, #18
 800107c:	d82a      	bhi.n	80010d4 <HAL_GPIO_Init+0xcc>
 800107e:	2b12      	cmp	r3, #18
 8001080:	d859      	bhi.n	8001136 <HAL_GPIO_Init+0x12e>
 8001082:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <HAL_GPIO_Init+0x80>)
 8001084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001088:	08001103 	.word	0x08001103
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010ef 	.word	0x080010ef
 8001094:	08001131 	.word	0x08001131
 8001098:	08001137 	.word	0x08001137
 800109c:	08001137 	.word	0x08001137
 80010a0:	08001137 	.word	0x08001137
 80010a4:	08001137 	.word	0x08001137
 80010a8:	08001137 	.word	0x08001137
 80010ac:	08001137 	.word	0x08001137
 80010b0:	08001137 	.word	0x08001137
 80010b4:	08001137 	.word	0x08001137
 80010b8:	08001137 	.word	0x08001137
 80010bc:	08001137 	.word	0x08001137
 80010c0:	08001137 	.word	0x08001137
 80010c4:	08001137 	.word	0x08001137
 80010c8:	08001137 	.word	0x08001137
 80010cc:	080010e5 	.word	0x080010e5
 80010d0:	080010f9 	.word	0x080010f9
 80010d4:	4a79      	ldr	r2, [pc, #484]	; (80012bc <HAL_GPIO_Init+0x2b4>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010da:	e02c      	b.n	8001136 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	623b      	str	r3, [r7, #32]
          break;
 80010e2:	e029      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	3304      	adds	r3, #4
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e024      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	3308      	adds	r3, #8
 80010f4:	623b      	str	r3, [r7, #32]
          break;
 80010f6:	e01f      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	330c      	adds	r3, #12
 80010fe:	623b      	str	r3, [r7, #32]
          break;
 8001100:	e01a      	b.n	8001138 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d102      	bne.n	8001110 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2304      	movs	r3, #4
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e013      	b.n	8001138 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001118:	2308      	movs	r3, #8
 800111a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	611a      	str	r2, [r3, #16]
          break;
 8001122:	e009      	b.n	8001138 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001124:	2308      	movs	r3, #8
 8001126:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	615a      	str	r2, [r3, #20]
          break;
 800112e:	e003      	b.n	8001138 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
          break;
 8001134:	e000      	b.n	8001138 <HAL_GPIO_Init+0x130>
          break;
 8001136:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2bff      	cmp	r3, #255	; 0xff
 800113c:	d801      	bhi.n	8001142 <HAL_GPIO_Init+0x13a>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	e001      	b.n	8001146 <HAL_GPIO_Init+0x13e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	; 0xff
 800114c:	d802      	bhi.n	8001154 <HAL_GPIO_Init+0x14c>
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x152>
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	3b08      	subs	r3, #8
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	210f      	movs	r1, #15
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	fa01 f303 	lsl.w	r3, r1, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	401a      	ands	r2, r3
 800116c:	6a39      	ldr	r1, [r7, #32]
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	fa01 f303 	lsl.w	r3, r1, r3
 8001174:	431a      	orrs	r2, r3
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 80b1 	beq.w	80012ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001188:	4b4d      	ldr	r3, [pc, #308]	; (80012c0 <HAL_GPIO_Init+0x2b8>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a4c      	ldr	r2, [pc, #304]	; (80012c0 <HAL_GPIO_Init+0x2b8>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <HAL_GPIO_Init+0x2b8>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011a0:	4a48      	ldr	r2, [pc, #288]	; (80012c4 <HAL_GPIO_Init+0x2bc>)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	220f      	movs	r2, #15
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4013      	ands	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a40      	ldr	r2, [pc, #256]	; (80012c8 <HAL_GPIO_Init+0x2c0>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d013      	beq.n	80011f4 <HAL_GPIO_Init+0x1ec>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a3f      	ldr	r2, [pc, #252]	; (80012cc <HAL_GPIO_Init+0x2c4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d00d      	beq.n	80011f0 <HAL_GPIO_Init+0x1e8>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a3e      	ldr	r2, [pc, #248]	; (80012d0 <HAL_GPIO_Init+0x2c8>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d007      	beq.n	80011ec <HAL_GPIO_Init+0x1e4>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3d      	ldr	r2, [pc, #244]	; (80012d4 <HAL_GPIO_Init+0x2cc>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d101      	bne.n	80011e8 <HAL_GPIO_Init+0x1e0>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e006      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011e8:	2304      	movs	r3, #4
 80011ea:	e004      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e002      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_GPIO_Init+0x1ee>
 80011f4:	2300      	movs	r3, #0
 80011f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f8:	f002 0203 	and.w	r2, r2, #3
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	4093      	lsls	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001206:	492f      	ldr	r1, [pc, #188]	; (80012c4 <HAL_GPIO_Init+0x2bc>)
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	089b      	lsrs	r3, r3, #2
 800120c:	3302      	adds	r3, #2
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	492c      	ldr	r1, [pc, #176]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	608b      	str	r3, [r1, #8]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4928      	ldr	r1, [pc, #160]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	4922      	ldr	r1, [pc, #136]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	60cb      	str	r3, [r1, #12]
 8001254:	e006      	b.n	8001264 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	43db      	mvns	r3, r3
 800125e:	491e      	ldr	r1, [pc, #120]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001260:	4013      	ands	r3, r2
 8001262:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d006      	beq.n	800127e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4918      	ldr	r1, [pc, #96]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	604b      	str	r3, [r1, #4]
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	43db      	mvns	r3, r3
 8001286:	4914      	ldr	r1, [pc, #80]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 8001288:	4013      	ands	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d021      	beq.n	80012dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	490e      	ldr	r1, [pc, #56]	; (80012d8 <HAL_GPIO_Init+0x2d0>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e021      	b.n	80012ea <HAL_GPIO_Init+0x2e2>
 80012a6:	bf00      	nop
 80012a8:	10320000 	.word	0x10320000
 80012ac:	10310000 	.word	0x10310000
 80012b0:	10220000 	.word	0x10220000
 80012b4:	10210000 	.word	0x10210000
 80012b8:	10120000 	.word	0x10120000
 80012bc:	10110000 	.word	0x10110000
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40010000 	.word	0x40010000
 80012c8:	40010800 	.word	0x40010800
 80012cc:	40010c00 	.word	0x40010c00
 80012d0:	40011000 	.word	0x40011000
 80012d4:	40011400 	.word	0x40011400
 80012d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <HAL_GPIO_Init+0x304>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4909      	ldr	r1, [pc, #36]	; (800130c <HAL_GPIO_Init+0x304>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	3301      	adds	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f ae8e 	bne.w	800101c <HAL_GPIO_Init+0x14>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	372c      	adds	r7, #44	; 0x2c
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	611a      	str	r2, [r3, #16]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4013      	ands	r3, r2
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	43d9      	mvns	r1, r3
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	400b      	ands	r3, r1
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	611a      	str	r2, [r3, #16]
}
 8001368:	bf00      	nop
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
	...

08001374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e272      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8087 	beq.w	80014a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001394:	4b92      	ldr	r3, [pc, #584]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 030c 	and.w	r3, r3, #12
 800139c:	2b04      	cmp	r3, #4
 800139e:	d00c      	beq.n	80013ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013a0:	4b8f      	ldr	r3, [pc, #572]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d112      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5e>
 80013ac:	4b8c      	ldr	r3, [pc, #560]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d10b      	bne.n	80013d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ba:	4b89      	ldr	r3, [pc, #548]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d06c      	beq.n	80014a0 <HAL_RCC_OscConfig+0x12c>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d168      	bne.n	80014a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e24c      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013da:	d106      	bne.n	80013ea <HAL_RCC_OscConfig+0x76>
 80013dc:	4b80      	ldr	r3, [pc, #512]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a7f      	ldr	r2, [pc, #508]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e02e      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10c      	bne.n	800140c <HAL_RCC_OscConfig+0x98>
 80013f2:	4b7b      	ldr	r3, [pc, #492]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7a      	ldr	r2, [pc, #488]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	4b78      	ldr	r3, [pc, #480]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a77      	ldr	r2, [pc, #476]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001404:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	e01d      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0xbc>
 8001416:	4b72      	ldr	r3, [pc, #456]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a71      	ldr	r2, [pc, #452]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800141c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b6f      	ldr	r3, [pc, #444]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a6e      	ldr	r2, [pc, #440]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	e00b      	b.n	8001448 <HAL_RCC_OscConfig+0xd4>
 8001430:	4b6b      	ldr	r3, [pc, #428]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a6a      	ldr	r2, [pc, #424]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b68      	ldr	r3, [pc, #416]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a67      	ldr	r2, [pc, #412]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001446:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d013      	beq.n	8001478 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff f9fc 	bl	800084c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001458:	f7ff f9f8 	bl	800084c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b64      	cmp	r3, #100	; 0x64
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e200      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b5d      	ldr	r3, [pc, #372]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d0f0      	beq.n	8001458 <HAL_RCC_OscConfig+0xe4>
 8001476:	e014      	b.n	80014a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001478:	f7ff f9e8 	bl	800084c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001480:	f7ff f9e4 	bl	800084c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b64      	cmp	r3, #100	; 0x64
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e1ec      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001492:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x10c>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d063      	beq.n	8001576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ae:	4b4c      	ldr	r3, [pc, #304]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d00b      	beq.n	80014d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d11c      	bne.n	8001500 <HAL_RCC_OscConfig+0x18c>
 80014c6:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d116      	bne.n	8001500 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014d2:	4b43      	ldr	r3, [pc, #268]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d005      	beq.n	80014ea <HAL_RCC_OscConfig+0x176>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e1c0      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4939      	ldr	r1, [pc, #228]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fe:	e03a      	b.n	8001576 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d020      	beq.n	800154a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150e:	f7ff f99d 	bl	800084c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001516:	f7ff f999 	bl	800084c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e1a1      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001528:	4b2d      	ldr	r3, [pc, #180]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001534:	4b2a      	ldr	r3, [pc, #168]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	4927      	ldr	r1, [pc, #156]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e015      	b.n	8001576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b26      	ldr	r3, [pc, #152]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800154c:	2200      	movs	r2, #0
 800154e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff f97c 	bl	800084c <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001558:	f7ff f978 	bl	800084c <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e180      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800156a:	4b1d      	ldr	r3, [pc, #116]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d03a      	beq.n	80015f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d019      	beq.n	80015be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <HAL_RCC_OscConfig+0x274>)
 800158c:	2201      	movs	r2, #1
 800158e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff f95c 	bl	800084c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff f958 	bl	800084c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e160      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015b6:	2001      	movs	r0, #1
 80015b8:	f000 face 	bl	8001b58 <RCC_Delay>
 80015bc:	e01c      	b.n	80015f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <HAL_RCC_OscConfig+0x274>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c4:	f7ff f942 	bl	800084c <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ca:	e00f      	b.n	80015ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff f93e 	bl	800084c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d908      	bls.n	80015ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e146      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	42420000 	.word	0x42420000
 80015e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015ec:	4b92      	ldr	r3, [pc, #584]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	f003 0302 	and.w	r3, r3, #2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1e9      	bne.n	80015cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0304 	and.w	r3, r3, #4
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80a6 	beq.w	8001752 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001606:	2300      	movs	r3, #0
 8001608:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160a:	4b8b      	ldr	r3, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10d      	bne.n	8001632 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b88      	ldr	r3, [pc, #544]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a87      	ldr	r2, [pc, #540]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b85      	ldr	r3, [pc, #532]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162e:	2301      	movs	r3, #1
 8001630:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001632:	4b82      	ldr	r3, [pc, #520]	; (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163a:	2b00      	cmp	r3, #0
 800163c:	d118      	bne.n	8001670 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163e:	4b7f      	ldr	r3, [pc, #508]	; (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a7e      	ldr	r2, [pc, #504]	; (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800164a:	f7ff f8ff 	bl	800084c <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001652:	f7ff f8fb 	bl	800084c <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b64      	cmp	r3, #100	; 0x64
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e103      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001664:	4b75      	ldr	r3, [pc, #468]	; (800183c <HAL_RCC_OscConfig+0x4c8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x312>
 8001678:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4a6e      	ldr	r2, [pc, #440]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	f043 0301 	orr.w	r3, r3, #1
 8001682:	6213      	str	r3, [r2, #32]
 8001684:	e02d      	b.n	80016e2 <HAL_RCC_OscConfig+0x36e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x334>
 800168e:	4b6a      	ldr	r3, [pc, #424]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4a69      	ldr	r2, [pc, #420]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f023 0301 	bic.w	r3, r3, #1
 8001698:	6213      	str	r3, [r2, #32]
 800169a:	4b67      	ldr	r3, [pc, #412]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a66      	ldr	r2, [pc, #408]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	e01c      	b.n	80016e2 <HAL_RCC_OscConfig+0x36e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	d10c      	bne.n	80016ca <HAL_RCC_OscConfig+0x356>
 80016b0:	4b61      	ldr	r3, [pc, #388]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a60      	ldr	r2, [pc, #384]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	f043 0304 	orr.w	r3, r3, #4
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a5d      	ldr	r2, [pc, #372]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	e00b      	b.n	80016e2 <HAL_RCC_OscConfig+0x36e>
 80016ca:	4b5b      	ldr	r3, [pc, #364]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	4a5a      	ldr	r2, [pc, #360]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016d0:	f023 0301 	bic.w	r3, r3, #1
 80016d4:	6213      	str	r3, [r2, #32]
 80016d6:	4b58      	ldr	r3, [pc, #352]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a57      	ldr	r2, [pc, #348]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0304 	bic.w	r3, r3, #4
 80016e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d015      	beq.n	8001716 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ea:	f7ff f8af 	bl	800084c <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	e00a      	b.n	8001708 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f2:	f7ff f8ab 	bl	800084c <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0b1      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	4b4b      	ldr	r3, [pc, #300]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ee      	beq.n	80016f2 <HAL_RCC_OscConfig+0x37e>
 8001714:	e014      	b.n	8001740 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001716:	f7ff f899 	bl	800084c <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff f895 	bl	800084c <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e09b      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	4b40      	ldr	r3, [pc, #256]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1ee      	bne.n	800171e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d105      	bne.n	8001752 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a3b      	ldr	r2, [pc, #236]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8087 	beq.w	800186a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	4b36      	ldr	r3, [pc, #216]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b08      	cmp	r3, #8
 8001766:	d061      	beq.n	800182c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d146      	bne.n	80017fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	4b33      	ldr	r3, [pc, #204]	; (8001840 <HAL_RCC_OscConfig+0x4cc>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001776:	f7ff f869 	bl	800084c <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177e:	f7ff f865 	bl	800084c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e06d      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	4b29      	ldr	r3, [pc, #164]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a4:	d108      	bne.n	80017b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a6:	4b24      	ldr	r3, [pc, #144]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4921      	ldr	r1, [pc, #132]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a19      	ldr	r1, [r3, #32]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c8:	430b      	orrs	r3, r1
 80017ca:	491b      	ldr	r1, [pc, #108]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017d0:	4b1b      	ldr	r3, [pc, #108]	; (8001840 <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff f839 	bl	800084c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff f835 	bl	800084c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e03d      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x46a>
 80017fc:	e035      	b.n	800186a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_RCC_OscConfig+0x4cc>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff f822 	bl	800084c <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180c:	f7ff f81e 	bl	800084c <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e026      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x498>
 800182a:	e01e      	b.n	800186a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d107      	bne.n	8001844 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e019      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
 8001838:	40021000 	.word	0x40021000
 800183c:	40007000 	.word	0x40007000
 8001840:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_RCC_OscConfig+0x500>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	429a      	cmp	r2, r3
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0d0      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b6a      	ldr	r3, [pc, #424]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d910      	bls.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4965      	ldr	r1, [pc, #404]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e0b8      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d020      	beq.n	800190a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d4:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a58      	ldr	r2, [pc, #352]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ec:	4b53      	ldr	r3, [pc, #332]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	4a52      	ldr	r2, [pc, #328]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f8:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	494d      	ldr	r1, [pc, #308]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	4313      	orrs	r3, r2
 8001908:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d040      	beq.n	8001998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d115      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e07f      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b41      	ldr	r3, [pc, #260]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e073      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e06b      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4936      	ldr	r1, [pc, #216]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7fe ff70 	bl	800084c <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7fe ff6c 	bl	800084c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e053      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d210      	bcs.n	80019c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f023 0207 	bic.w	r2, r3, #7
 80019ae:	4922      	ldr	r1, [pc, #136]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d001      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e032      	b.n	8001a2e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d008      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d4:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4916      	ldr	r1, [pc, #88]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d009      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f2:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	490e      	ldr	r1, [pc, #56]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a06:	f000 f821 	bl	8001a4c <HAL_RCC_GetSysClockFreq>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	490a      	ldr	r1, [pc, #40]	; (8001a40 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	5ccb      	ldrb	r3, [r1, r3]
 8001a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1e:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1cc>)
 8001a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_ClockConfig+0x1d0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fece 	bl	80007c8 <HAL_InitTick>

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40022000 	.word	0x40022000
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	08003568 	.word	0x08003568
 8001a44:	20000000 	.word	0x20000000
 8001a48:	20000004 	.word	0x20000004

08001a4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a66:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d002      	beq.n	8001a7c <HAL_RCC_GetSysClockFreq+0x30>
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d003      	beq.n	8001a82 <HAL_RCC_GetSysClockFreq+0x36>
 8001a7a:	e027      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a7c:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7e:	613b      	str	r3, [r7, #16]
      break;
 8001a80:	e027      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	0c9b      	lsrs	r3, r3, #18
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a8c:	5cd3      	ldrb	r3, [r2, r3]
 8001a8e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d010      	beq.n	8001abc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	0c5b      	lsrs	r3, r3, #17
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aae:	fb03 f202 	mul.w	r2, r3, r2
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e004      	b.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a0c      	ldr	r2, [pc, #48]	; (8001af0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	613b      	str	r3, [r7, #16]
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ace:	613b      	str	r3, [r7, #16]
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	693b      	ldr	r3, [r7, #16]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	007a1200 	.word	0x007a1200
 8001ae8:	08003580 	.word	0x08003580
 8001aec:	08003590 	.word	0x08003590
 8001af0:	003d0900 	.word	0x003d0900

08001af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af8:	4b02      	ldr	r3, [pc, #8]	; (8001b04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001afa:	681b      	ldr	r3, [r3, #0]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b0c:	f7ff fff2 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	0a1b      	lsrs	r3, r3, #8
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4903      	ldr	r1, [pc, #12]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08003578 	.word	0x08003578

08001b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b34:	f7ff ffde 	bl	8001af4 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	0adb      	lsrs	r3, r3, #11
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40021000 	.word	0x40021000
 8001b54:	08003578 	.word	0x08003578

08001b58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b60:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <RCC_Delay+0x34>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <RCC_Delay+0x38>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0a5b      	lsrs	r3, r3, #9
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	fb02 f303 	mul.w	r3, r2, r3
 8001b72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b74:	bf00      	nop
  }
  while (Delay --);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1e5a      	subs	r2, r3, #1
 8001b7a:	60fa      	str	r2, [r7, #12]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f9      	bne.n	8001b74 <RCC_Delay+0x1c>
}
 8001b80:	bf00      	nop
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr
 8001b8c:	20000000 	.word	0x20000000
 8001b90:	10624dd3 	.word	0x10624dd3

08001b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e042      	b.n	8001c2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d106      	bne.n	8001bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe fd1e 	bl	80005fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2224      	movs	r2, #36	; 0x24
 8001bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 ff6d 	bl	8002ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695a      	ldr	r2, [r3, #20]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d156      	bne.n	8001cfc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <HAL_UART_Transmit_DMA+0x26>
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e04f      	b.n	8001cfe <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	88fa      	ldrh	r2, [r7, #6]
 8001c68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	88fa      	ldrh	r2, [r7, #6]
 8001c6e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2221      	movs	r2, #33	; 0x21
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c82:	4a21      	ldr	r2, [pc, #132]	; (8001d08 <HAL_UART_Transmit_DMA+0xd4>)
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8a:	4a20      	ldr	r2, [pc, #128]	; (8001d0c <HAL_UART_Transmit_DMA+0xd8>)
 8001c8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_UART_Transmit_DMA+0xdc>)
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001c9e:	f107 0308 	add.w	r3, r7, #8
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	6819      	ldr	r1, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f7fe ff5f 	bl	8000b78 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cc2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	3314      	adds	r3, #20
 8001cca:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	e853 3f00 	ldrex	r3, [r3]
 8001cd2:	617b      	str	r3, [r7, #20]
   return(result);
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	3314      	adds	r3, #20
 8001ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ce4:	627a      	str	r2, [r7, #36]	; 0x24
 8001ce6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce8:	6a39      	ldr	r1, [r7, #32]
 8001cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cec:	e841 2300 	strex	r3, r2, [r1]
 8001cf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1e5      	bne.n	8001cc4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e000      	b.n	8001cfe <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
  }
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3730      	adds	r7, #48	; 0x30
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	0800234f 	.word	0x0800234f
 8001d0c:	080023e9 	.word	0x080023e9
 8001d10:	0800256d 	.word	0x0800256d

08001d14 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d14a      	bne.n	8001dc4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e043      	b.n	8001dc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2200      	movs	r2, #0
 8001d48:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68b9      	ldr	r1, [r7, #8]
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f000 fc55 	bl	8002600 <UART_Start_Receive_DMA>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8001d5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d12c      	bne.n	8001dbe <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d125      	bne.n	8001db8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	330c      	adds	r3, #12
 8001d88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	e853 3f00 	ldrex	r3, [r3]
 8001d90:	617b      	str	r3, [r7, #20]
   return(result);
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f043 0310 	orr.w	r3, r3, #16
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	330c      	adds	r3, #12
 8001da0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001da2:	627a      	str	r2, [r7, #36]	; 0x24
 8001da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001da6:	6a39      	ldr	r1, [r7, #32]
 8001da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001daa:	e841 2300 	strex	r3, r2, [r1]
 8001dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1e5      	bne.n	8001d82 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8001db6:	e002      	b.n	8001dbe <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8001dbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dc2:	e000      	b.n	8001dc6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8001dc4:	2302      	movs	r3, #2
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3730      	adds	r7, #48	; 0x30
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0ba      	sub	sp, #232	; 0xe8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10f      	bne.n	8001e36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_UART_IRQHandler+0x66>
 8001e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 fd84 	bl	800293c <UART_Receive_IT>
      return;
 8001e34:	e25b      	b.n	80022ee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80de 	beq.w	8001ffc <HAL_UART_IRQHandler+0x22c>
 8001e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80d1 	beq.w	8001ffc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_UART_IRQHandler+0xae>
 8001e66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d005      	beq.n	8001e7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f043 0201 	orr.w	r2, r3, #1
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d00b      	beq.n	8001ea2 <HAL_UART_IRQHandler+0xd2>
 8001e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f043 0202 	orr.w	r2, r3, #2
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00b      	beq.n	8001ec6 <HAL_UART_IRQHandler+0xf6>
 8001eae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f043 0204 	orr.w	r2, r3, #4
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d011      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x126>
 8001ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ed6:	f003 0320 	and.w	r3, r3, #32
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eee:	f043 0208 	orr.w	r2, r3, #8
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 81f2 	beq.w	80022e4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f04:	f003 0320 	and.w	r3, r3, #32
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d008      	beq.n	8001f1e <HAL_UART_IRQHandler+0x14e>
 8001f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fd0f 	bl	800293c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d103      	bne.n	8001f4a <HAL_UART_IRQHandler+0x17a>
 8001f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d04f      	beq.n	8001fea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 fc19 	bl	8002782 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d041      	beq.n	8001fe2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	3314      	adds	r3, #20
 8001f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f6c:	e853 3f00 	ldrex	r3, [r3]
 8001f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	3314      	adds	r3, #20
 8001f86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f9a:	e841 2300 	strex	r3, r2, [r1]
 8001f9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001fa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1d9      	bne.n	8001f5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d013      	beq.n	8001fda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	4a7e      	ldr	r2, [pc, #504]	; (80021b0 <HAL_UART_IRQHandler+0x3e0>)
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fe76 	bl	8000cb0 <HAL_DMA_Abort_IT>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	e00e      	b.n	8001ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f9ae 	bl	800233c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe0:	e00a      	b.n	8001ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f9aa 	bl	800233c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fe8:	e006      	b.n	8001ff8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f9a6 	bl	800233c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001ff6:	e175      	b.n	80022e4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff8:	bf00      	nop
    return;
 8001ffa:	e173      	b.n	80022e4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002000:	2b01      	cmp	r3, #1
 8002002:	f040 814f 	bne.w	80022a4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8148 	beq.w	80022a4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002018:	f003 0310 	and.w	r3, r3, #16
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8141 	beq.w	80022a4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80b6 	beq.w	80021b4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002054:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8145 	beq.w	80022e8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002066:	429a      	cmp	r2, r3
 8002068:	f080 813e 	bcs.w	80022e8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002072:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b20      	cmp	r3, #32
 800207c:	f000 8088 	beq.w	8002190 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	330c      	adds	r3, #12
 8002086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800208a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800208e:	e853 3f00 	ldrex	r3, [r3]
 8002092:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002096:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800209a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800209e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	330c      	adds	r3, #12
 80020a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80020b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80020bc:	e841 2300 	strex	r3, r2, [r1]
 80020c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80020c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1d9      	bne.n	8002080 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	3314      	adds	r3, #20
 80020d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d6:	e853 3f00 	ldrex	r3, [r3]
 80020da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80020dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3314      	adds	r3, #20
 80020ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80020f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020fc:	e841 2300 	strex	r3, r2, [r1]
 8002100:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002102:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e1      	bne.n	80020cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	3314      	adds	r3, #20
 800210e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002110:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002112:	e853 3f00 	ldrex	r3, [r3]
 8002116:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800211a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800211e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3314      	adds	r3, #20
 8002128:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800212c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800212e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002130:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002132:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002134:	e841 2300 	strex	r3, r2, [r1]
 8002138:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800213a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1e3      	bne.n	8002108 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	330c      	adds	r3, #12
 8002154:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002158:	e853 3f00 	ldrex	r3, [r3]
 800215c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800215e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002160:	f023 0310 	bic.w	r3, r3, #16
 8002164:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	330c      	adds	r3, #12
 800216e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002172:	65ba      	str	r2, [r7, #88]	; 0x58
 8002174:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002176:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002178:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e3      	bne.n	800214e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fd54 	bl	8000c38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2202      	movs	r2, #2
 8002194:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800219e:	b29b      	uxth	r3, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe f83c 	bl	8000224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021ac:	e09c      	b.n	80022e8 <HAL_UART_IRQHandler+0x518>
 80021ae:	bf00      	nop
 80021b0:	08002847 	.word	0x08002847
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021bc:	b29b      	uxth	r3, r3
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 808e 	beq.w	80022ec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80021d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8089 	beq.w	80022ec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	330c      	adds	r3, #12
 80021e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e4:	e853 3f00 	ldrex	r3, [r3]
 80021e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80021ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	330c      	adds	r3, #12
 80021fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021fe:	647a      	str	r2, [r7, #68]	; 0x44
 8002200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002206:	e841 2300 	strex	r3, r2, [r1]
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800220c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1e3      	bne.n	80021da <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3314      	adds	r3, #20
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	e853 3f00 	ldrex	r3, [r3]
 8002220:	623b      	str	r3, [r7, #32]
   return(result);
 8002222:	6a3b      	ldr	r3, [r7, #32]
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3314      	adds	r3, #20
 8002232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002236:	633a      	str	r2, [r7, #48]	; 0x30
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800223c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e3      	bne.n	8002212 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2220      	movs	r2, #32
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	e853 3f00 	ldrex	r3, [r3]
 8002266:	60fb      	str	r3, [r7, #12]
   return(result);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0310 	bic.w	r3, r3, #16
 800226e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800227c:	61fa      	str	r2, [r7, #28]
 800227e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002280:	69b9      	ldr	r1, [r7, #24]
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	e841 2300 	strex	r3, r2, [r1]
 8002288:	617b      	str	r3, [r7, #20]
   return(result);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1e3      	bne.n	8002258 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800229a:	4619      	mov	r1, r3
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7fd ffc1 	bl	8000224 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022a2:	e023      	b.n	80022ec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d009      	beq.n	80022c4 <HAL_UART_IRQHandler+0x4f4>
 80022b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 fad6 	bl	800286e <UART_Transmit_IT>
    return;
 80022c2:	e014      	b.n	80022ee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00e      	beq.n	80022ee <HAL_UART_IRQHandler+0x51e>
 80022d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fb15 	bl	800290c <UART_EndTransmit_IT>
    return;
 80022e2:	e004      	b.n	80022ee <HAL_UART_IRQHandler+0x51e>
    return;
 80022e4:	bf00      	nop
 80022e6:	e002      	b.n	80022ee <HAL_UART_IRQHandler+0x51e>
      return;
 80022e8:	bf00      	nop
 80022ea:	e000      	b.n	80022ee <HAL_UART_IRQHandler+0x51e>
      return;
 80022ec:	bf00      	nop
  }
}
 80022ee:	37e8      	adds	r7, #232	; 0xe8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b090      	sub	sp, #64	; 0x40
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0320 	and.w	r3, r3, #32
 8002366:	2b00      	cmp	r3, #0
 8002368:	d137      	bne.n	80023da <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800236a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800236c:	2200      	movs	r2, #0
 800236e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3314      	adds	r3, #20
 8002376:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	e853 3f00 	ldrex	r3, [r3]
 800237e:	623b      	str	r3, [r7, #32]
   return(result);
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38
 8002388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3314      	adds	r3, #20
 800238e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002390:	633a      	str	r2, [r7, #48]	; 0x30
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002394:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002398:	e841 2300 	strex	r3, r2, [r1]
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e5      	bne.n	8002370 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80023a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	330c      	adds	r3, #12
 80023aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	e853 3f00 	ldrex	r3, [r3]
 80023b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
 80023bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	330c      	adds	r3, #12
 80023c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023c4:	61fa      	str	r2, [r7, #28]
 80023c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023c8:	69b9      	ldr	r1, [r7, #24]
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	e841 2300 	strex	r3, r2, [r1]
 80023d0:	617b      	str	r3, [r7, #20]
   return(result);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1e5      	bne.n	80023a4 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80023d8:	e002      	b.n	80023e0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80023da:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80023dc:	f7ff ff8a 	bl	80022f4 <HAL_UART_TxCpltCallback>
}
 80023e0:	bf00      	nop
 80023e2:	3740      	adds	r7, #64	; 0x40
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f7ff ff85 	bl	8002306 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023fc:	bf00      	nop
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b09c      	sub	sp, #112	; 0x70
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002410:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	2b00      	cmp	r3, #0
 800241e:	d172      	bne.n	8002506 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002422:	2200      	movs	r2, #0
 8002424:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800243c:	66bb      	str	r3, [r7, #104]	; 0x68
 800243e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	330c      	adds	r3, #12
 8002444:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002446:	65ba      	str	r2, [r7, #88]	; 0x58
 8002448:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800244c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800244e:	e841 2300 	strex	r3, r2, [r1]
 8002452:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e5      	bne.n	8002426 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3314      	adds	r3, #20
 8002460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	e853 3f00 	ldrex	r3, [r3]
 8002468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800246a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	667b      	str	r3, [r7, #100]	; 0x64
 8002472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3314      	adds	r3, #20
 8002478:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800247a:	647a      	str	r2, [r7, #68]	; 0x44
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e5      	bne.n	800245a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	3314      	adds	r3, #20
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	e853 3f00 	ldrex	r3, [r3]
 800249c:	623b      	str	r3, [r7, #32]
   return(result);
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024a4:	663b      	str	r3, [r7, #96]	; 0x60
 80024a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	3314      	adds	r3, #20
 80024ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024ae:	633a      	str	r2, [r7, #48]	; 0x30
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024b6:	e841 2300 	strex	r3, r2, [r1]
 80024ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80024bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1e5      	bne.n	800248e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d119      	bne.n	8002506 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	e853 3f00 	ldrex	r3, [r3]
 80024e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f023 0310 	bic.w	r3, r3, #16
 80024e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	330c      	adds	r3, #12
 80024f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80024f2:	61fa      	str	r2, [r7, #28]
 80024f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024f6:	69b9      	ldr	r1, [r7, #24]
 80024f8:	69fa      	ldr	r2, [r7, #28]
 80024fa:	e841 2300 	strex	r3, r2, [r1]
 80024fe:	617b      	str	r3, [r7, #20]
   return(result);
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1e5      	bne.n	80024d2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002508:	2200      	movs	r2, #0
 800250a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800250c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002516:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002518:	4619      	mov	r1, r3
 800251a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800251c:	f7fd fe82 	bl	8000224 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002520:	e002      	b.n	8002528 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002522:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002524:	f7ff fef8 	bl	8002318 <HAL_UART_RxCpltCallback>
}
 8002528:	bf00      	nop
 800252a:	3770      	adds	r7, #112	; 0x70
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	2b01      	cmp	r3, #1
 800254a:	d108      	bne.n	800255e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002550:	085b      	lsrs	r3, r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	4619      	mov	r1, r3
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f7fd fe64 	bl	8000224 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800255c:	e002      	b.n	8002564 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f7ff fee3 	bl	800232a <HAL_UART_RxHalfCpltCallback>
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf14      	ite	ne
 800258c:	2301      	movne	r3, #1
 800258e:	2300      	moveq	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b21      	cmp	r3, #33	; 0x21
 800259e:	d108      	bne.n	80025b2 <UART_DMAError+0x46>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d005      	beq.n	80025b2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2200      	movs	r2, #0
 80025aa:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80025ac:	68b8      	ldr	r0, [r7, #8]
 80025ae:	f000 f8c1 	bl	8002734 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2301      	movne	r3, #1
 80025c2:	2300      	moveq	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b22      	cmp	r3, #34	; 0x22
 80025d2:	d108      	bne.n	80025e6 <UART_DMAError+0x7a>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80025e0:	68b8      	ldr	r0, [r7, #8]
 80025e2:	f000 f8ce 	bl	8002782 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ea:	f043 0210 	orr.w	r2, r3, #16
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025f2:	68b8      	ldr	r0, [r7, #8]
 80025f4:	f7ff fea2 	bl	800233c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b098      	sub	sp, #96	; 0x60
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	4613      	mov	r3, r2
 800260c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2222      	movs	r2, #34	; 0x22
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	4a3e      	ldr	r2, [pc, #248]	; (8002728 <UART_Start_Receive_DMA+0x128>)
 800262e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002634:	4a3d      	ldr	r2, [pc, #244]	; (800272c <UART_Start_Receive_DMA+0x12c>)
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263c:	4a3c      	ldr	r2, [pc, #240]	; (8002730 <UART_Start_Receive_DMA+0x130>)
 800263e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002644:	2200      	movs	r2, #0
 8002646:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3304      	adds	r3, #4
 8002658:	4619      	mov	r1, r3
 800265a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	f7fe fa8a 	bl	8000b78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	613b      	str	r3, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d019      	beq.n	80026b6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	330c      	adds	r3, #12
 8002688:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800268c:	e853 3f00 	ldrex	r3, [r3]
 8002690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002698:	65bb      	str	r3, [r7, #88]	; 0x58
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	330c      	adds	r3, #12
 80026a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026a2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80026a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026a6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80026a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026aa:	e841 2300 	strex	r3, r2, [r1]
 80026ae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80026b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e5      	bne.n	8002682 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3314      	adds	r3, #20
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	e853 3f00 	ldrex	r3, [r3]
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	657b      	str	r3, [r7, #84]	; 0x54
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3314      	adds	r3, #20
 80026d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026de:	e841 2300 	strex	r3, r2, [r1]
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1e5      	bne.n	80026b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3314      	adds	r3, #20
 80026f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	617b      	str	r3, [r7, #20]
   return(result);
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002700:	653b      	str	r3, [r7, #80]	; 0x50
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800270a:	627a      	str	r2, [r7, #36]	; 0x24
 800270c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270e:	6a39      	ldr	r1, [r7, #32]
 8002710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	61fb      	str	r3, [r7, #28]
   return(result);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e5      	bne.n	80026ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3760      	adds	r7, #96	; 0x60
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	08002405 	.word	0x08002405
 800272c:	08002531 	.word	0x08002531
 8002730:	0800256d 	.word	0x0800256d

08002734 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	; 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	330c      	adds	r3, #12
 8002742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	e853 3f00 	ldrex	r3, [r3]
 800274a:	60bb      	str	r3, [r7, #8]
   return(result);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002752:	61fb      	str	r3, [r7, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	330c      	adds	r3, #12
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	61ba      	str	r2, [r7, #24]
 800275e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	e841 2300 	strex	r3, r2, [r1]
 8002768:	613b      	str	r3, [r7, #16]
   return(result);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e5      	bne.n	800273c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002778:	bf00      	nop
 800277a:	3724      	adds	r7, #36	; 0x24
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002782:	b480      	push	{r7}
 8002784:	b095      	sub	sp, #84	; 0x54
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	e853 3f00 	ldrex	r3, [r3]
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80027a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	330c      	adds	r3, #12
 80027a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027aa:	643a      	str	r2, [r7, #64]	; 0x40
 80027ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80027b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027b2:	e841 2300 	strex	r3, r2, [r1]
 80027b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80027b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1e5      	bne.n	800278a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3314      	adds	r3, #20
 80027c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	e853 3f00 	ldrex	r3, [r3]
 80027cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	3314      	adds	r3, #20
 80027dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80027e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e5      	bne.n	80027be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d119      	bne.n	800282e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	330c      	adds	r3, #12
 8002800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	e853 3f00 	ldrex	r3, [r3]
 8002808:	60bb      	str	r3, [r7, #8]
   return(result);
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	f023 0310 	bic.w	r3, r3, #16
 8002810:	647b      	str	r3, [r7, #68]	; 0x44
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	330c      	adds	r3, #12
 8002818:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800281a:	61ba      	str	r2, [r7, #24]
 800281c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	6979      	ldr	r1, [r7, #20]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	e841 2300 	strex	r3, r2, [r1]
 8002826:	613b      	str	r3, [r7, #16]
   return(result);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1e5      	bne.n	80027fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2220      	movs	r2, #32
 8002832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800283c:	bf00      	nop
 800283e:	3754      	adds	r7, #84	; 0x54
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr

08002846 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002860:	68f8      	ldr	r0, [r7, #12]
 8002862:	f7ff fd6b 	bl	800233c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800286e:	b480      	push	{r7}
 8002870:	b085      	sub	sp, #20
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b21      	cmp	r3, #33	; 0x21
 8002880:	d13e      	bne.n	8002900 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800288a:	d114      	bne.n	80028b6 <UART_Transmit_IT+0x48>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d110      	bne.n	80028b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	1c9a      	adds	r2, r3, #2
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	621a      	str	r2, [r3, #32]
 80028b4:	e008      	b.n	80028c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	1c59      	adds	r1, r3, #1
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6211      	str	r1, [r2, #32]
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4619      	mov	r1, r3
 80028d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e000      	b.n	8002902 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
  }
}
 8002902:	4618      	mov	r0, r3
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002922:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fce1 	bl	80022f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08c      	sub	sp, #48	; 0x30
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b22      	cmp	r3, #34	; 0x22
 800294e:	f040 80ae 	bne.w	8002aae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295a:	d117      	bne.n	800298c <UART_Receive_IT+0x50>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d113      	bne.n	800298c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	b29b      	uxth	r3, r3
 8002976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800297a:	b29a      	uxth	r2, r3
 800297c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002984:	1c9a      	adds	r2, r3, #2
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
 800298a:	e026      	b.n	80029da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002992:	2300      	movs	r3, #0
 8002994:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	d007      	beq.n	80029b0 <UART_Receive_IT+0x74>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <UART_Receive_IT+0x82>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d106      	bne.n	80029be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e008      	b.n	80029d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	4619      	mov	r1, r3
 80029e8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d15d      	bne.n	8002aaa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0220 	bic.w	r2, r2, #32
 80029fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d135      	bne.n	8002aa0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	330c      	adds	r3, #12
 8002a40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	e853 3f00 	ldrex	r3, [r3]
 8002a48:	613b      	str	r3, [r7, #16]
   return(result);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f023 0310 	bic.w	r3, r3, #16
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	330c      	adds	r3, #12
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	623a      	str	r2, [r7, #32]
 8002a5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5e:	69f9      	ldr	r1, [r7, #28]
 8002a60:	6a3a      	ldr	r2, [r7, #32]
 8002a62:	e841 2300 	strex	r3, r2, [r1]
 8002a66:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1e5      	bne.n	8002a3a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b10      	cmp	r3, #16
 8002a7a:	d10a      	bne.n	8002a92 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a96:	4619      	mov	r1, r3
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7fd fbc3 	bl	8000224 <HAL_UARTEx_RxEventCallback>
 8002a9e:	e002      	b.n	8002aa6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff fc39 	bl	8002318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	e002      	b.n	8002ab0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	e000      	b.n	8002ab0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
  }
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3730      	adds	r7, #48	; 0x30
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002af2:	f023 030c 	bic.w	r3, r3, #12
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6812      	ldr	r2, [r2, #0]
 8002afa:	68b9      	ldr	r1, [r7, #8]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699a      	ldr	r2, [r3, #24]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a2c      	ldr	r2, [pc, #176]	; (8002bcc <UART_SetConfig+0x114>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d103      	bne.n	8002b28 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b20:	f7ff f806 	bl	8001b30 <HAL_RCC_GetPCLK2Freq>
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	e002      	b.n	8002b2e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b28:	f7fe ffee 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002b2c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	441a      	add	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b44:	4a22      	ldr	r2, [pc, #136]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	095b      	lsrs	r3, r3, #5
 8002b4c:	0119      	lsls	r1, r3, #4
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009a      	lsls	r2, r3, #2
 8002b58:	441a      	add	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b66:	fba3 0302 	umull	r0, r3, r3, r2
 8002b6a:	095b      	lsrs	r3, r3, #5
 8002b6c:	2064      	movs	r0, #100	; 0x64
 8002b6e:	fb00 f303 	mul.w	r3, r0, r3
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	3332      	adds	r3, #50	; 0x32
 8002b78:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	4419      	add	r1, r3
 8002b86:	68fa      	ldr	r2, [r7, #12]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <UART_SetConfig+0x118>)
 8002b9e:	fba3 0302 	umull	r0, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2064      	movs	r0, #100	; 0x64
 8002ba6:	fb00 f303 	mul.w	r3, r0, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <UART_SetConfig+0x118>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 020f 	and.w	r2, r3, #15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	40013800 	.word	0x40013800
 8002bd0:	51eb851f 	.word	0x51eb851f

08002bd4 <_vsiprintf_r>:
 8002bd4:	b500      	push	{lr}
 8002bd6:	b09b      	sub	sp, #108	; 0x6c
 8002bd8:	9100      	str	r1, [sp, #0]
 8002bda:	9104      	str	r1, [sp, #16]
 8002bdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002be0:	9105      	str	r1, [sp, #20]
 8002be2:	9102      	str	r1, [sp, #8]
 8002be4:	4905      	ldr	r1, [pc, #20]	; (8002bfc <_vsiprintf_r+0x28>)
 8002be6:	9103      	str	r1, [sp, #12]
 8002be8:	4669      	mov	r1, sp
 8002bea:	f000 f995 	bl	8002f18 <_svfiprintf_r>
 8002bee:	2200      	movs	r2, #0
 8002bf0:	9b00      	ldr	r3, [sp, #0]
 8002bf2:	701a      	strb	r2, [r3, #0]
 8002bf4:	b01b      	add	sp, #108	; 0x6c
 8002bf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002bfa:	bf00      	nop
 8002bfc:	ffff0208 	.word	0xffff0208

08002c00 <vsiprintf>:
 8002c00:	4613      	mov	r3, r2
 8002c02:	460a      	mov	r2, r1
 8002c04:	4601      	mov	r1, r0
 8002c06:	4802      	ldr	r0, [pc, #8]	; (8002c10 <vsiprintf+0x10>)
 8002c08:	6800      	ldr	r0, [r0, #0]
 8002c0a:	f7ff bfe3 	b.w	8002bd4 <_vsiprintf_r>
 8002c0e:	bf00      	nop
 8002c10:	20000058 	.word	0x20000058

08002c14 <memset>:
 8002c14:	4603      	mov	r3, r0
 8002c16:	4402      	add	r2, r0
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <memset+0xa>
 8002c1c:	4770      	bx	lr
 8002c1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c22:	e7f9      	b.n	8002c18 <memset+0x4>

08002c24 <__errno>:
 8002c24:	4b01      	ldr	r3, [pc, #4]	; (8002c2c <__errno+0x8>)
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000058 	.word	0x20000058

08002c30 <__libc_init_array>:
 8002c30:	b570      	push	{r4, r5, r6, lr}
 8002c32:	2600      	movs	r6, #0
 8002c34:	4d0c      	ldr	r5, [pc, #48]	; (8002c68 <__libc_init_array+0x38>)
 8002c36:	4c0d      	ldr	r4, [pc, #52]	; (8002c6c <__libc_init_array+0x3c>)
 8002c38:	1b64      	subs	r4, r4, r5
 8002c3a:	10a4      	asrs	r4, r4, #2
 8002c3c:	42a6      	cmp	r6, r4
 8002c3e:	d109      	bne.n	8002c54 <__libc_init_array+0x24>
 8002c40:	f000 fc7a 	bl	8003538 <_init>
 8002c44:	2600      	movs	r6, #0
 8002c46:	4d0a      	ldr	r5, [pc, #40]	; (8002c70 <__libc_init_array+0x40>)
 8002c48:	4c0a      	ldr	r4, [pc, #40]	; (8002c74 <__libc_init_array+0x44>)
 8002c4a:	1b64      	subs	r4, r4, r5
 8002c4c:	10a4      	asrs	r4, r4, #2
 8002c4e:	42a6      	cmp	r6, r4
 8002c50:	d105      	bne.n	8002c5e <__libc_init_array+0x2e>
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c58:	4798      	blx	r3
 8002c5a:	3601      	adds	r6, #1
 8002c5c:	e7ee      	b.n	8002c3c <__libc_init_array+0xc>
 8002c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c62:	4798      	blx	r3
 8002c64:	3601      	adds	r6, #1
 8002c66:	e7f2      	b.n	8002c4e <__libc_init_array+0x1e>
 8002c68:	080035c8 	.word	0x080035c8
 8002c6c:	080035c8 	.word	0x080035c8
 8002c70:	080035c8 	.word	0x080035c8
 8002c74:	080035cc 	.word	0x080035cc

08002c78 <__retarget_lock_acquire_recursive>:
 8002c78:	4770      	bx	lr

08002c7a <__retarget_lock_release_recursive>:
 8002c7a:	4770      	bx	lr

08002c7c <_free_r>:
 8002c7c:	b538      	push	{r3, r4, r5, lr}
 8002c7e:	4605      	mov	r5, r0
 8002c80:	2900      	cmp	r1, #0
 8002c82:	d040      	beq.n	8002d06 <_free_r+0x8a>
 8002c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c88:	1f0c      	subs	r4, r1, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	bfb8      	it	lt
 8002c8e:	18e4      	addlt	r4, r4, r3
 8002c90:	f000 f8dc 	bl	8002e4c <__malloc_lock>
 8002c94:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <_free_r+0x8c>)
 8002c96:	6813      	ldr	r3, [r2, #0]
 8002c98:	b933      	cbnz	r3, 8002ca8 <_free_r+0x2c>
 8002c9a:	6063      	str	r3, [r4, #4]
 8002c9c:	6014      	str	r4, [r2, #0]
 8002c9e:	4628      	mov	r0, r5
 8002ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ca4:	f000 b8d8 	b.w	8002e58 <__malloc_unlock>
 8002ca8:	42a3      	cmp	r3, r4
 8002caa:	d908      	bls.n	8002cbe <_free_r+0x42>
 8002cac:	6820      	ldr	r0, [r4, #0]
 8002cae:	1821      	adds	r1, r4, r0
 8002cb0:	428b      	cmp	r3, r1
 8002cb2:	bf01      	itttt	eq
 8002cb4:	6819      	ldreq	r1, [r3, #0]
 8002cb6:	685b      	ldreq	r3, [r3, #4]
 8002cb8:	1809      	addeq	r1, r1, r0
 8002cba:	6021      	streq	r1, [r4, #0]
 8002cbc:	e7ed      	b.n	8002c9a <_free_r+0x1e>
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	b10b      	cbz	r3, 8002cc8 <_free_r+0x4c>
 8002cc4:	42a3      	cmp	r3, r4
 8002cc6:	d9fa      	bls.n	8002cbe <_free_r+0x42>
 8002cc8:	6811      	ldr	r1, [r2, #0]
 8002cca:	1850      	adds	r0, r2, r1
 8002ccc:	42a0      	cmp	r0, r4
 8002cce:	d10b      	bne.n	8002ce8 <_free_r+0x6c>
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	4401      	add	r1, r0
 8002cd4:	1850      	adds	r0, r2, r1
 8002cd6:	4283      	cmp	r3, r0
 8002cd8:	6011      	str	r1, [r2, #0]
 8002cda:	d1e0      	bne.n	8002c9e <_free_r+0x22>
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4408      	add	r0, r1
 8002ce2:	6010      	str	r0, [r2, #0]
 8002ce4:	6053      	str	r3, [r2, #4]
 8002ce6:	e7da      	b.n	8002c9e <_free_r+0x22>
 8002ce8:	d902      	bls.n	8002cf0 <_free_r+0x74>
 8002cea:	230c      	movs	r3, #12
 8002cec:	602b      	str	r3, [r5, #0]
 8002cee:	e7d6      	b.n	8002c9e <_free_r+0x22>
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	1821      	adds	r1, r4, r0
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	bf01      	itttt	eq
 8002cf8:	6819      	ldreq	r1, [r3, #0]
 8002cfa:	685b      	ldreq	r3, [r3, #4]
 8002cfc:	1809      	addeq	r1, r1, r0
 8002cfe:	6021      	streq	r1, [r4, #0]
 8002d00:	6063      	str	r3, [r4, #4]
 8002d02:	6054      	str	r4, [r2, #4]
 8002d04:	e7cb      	b.n	8002c9e <_free_r+0x22>
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
 8002d08:	20000394 	.word	0x20000394

08002d0c <sbrk_aligned>:
 8002d0c:	b570      	push	{r4, r5, r6, lr}
 8002d0e:	4e0e      	ldr	r6, [pc, #56]	; (8002d48 <sbrk_aligned+0x3c>)
 8002d10:	460c      	mov	r4, r1
 8002d12:	6831      	ldr	r1, [r6, #0]
 8002d14:	4605      	mov	r5, r0
 8002d16:	b911      	cbnz	r1, 8002d1e <sbrk_aligned+0x12>
 8002d18:	f000 fbaa 	bl	8003470 <_sbrk_r>
 8002d1c:	6030      	str	r0, [r6, #0]
 8002d1e:	4621      	mov	r1, r4
 8002d20:	4628      	mov	r0, r5
 8002d22:	f000 fba5 	bl	8003470 <_sbrk_r>
 8002d26:	1c43      	adds	r3, r0, #1
 8002d28:	d00a      	beq.n	8002d40 <sbrk_aligned+0x34>
 8002d2a:	1cc4      	adds	r4, r0, #3
 8002d2c:	f024 0403 	bic.w	r4, r4, #3
 8002d30:	42a0      	cmp	r0, r4
 8002d32:	d007      	beq.n	8002d44 <sbrk_aligned+0x38>
 8002d34:	1a21      	subs	r1, r4, r0
 8002d36:	4628      	mov	r0, r5
 8002d38:	f000 fb9a 	bl	8003470 <_sbrk_r>
 8002d3c:	3001      	adds	r0, #1
 8002d3e:	d101      	bne.n	8002d44 <sbrk_aligned+0x38>
 8002d40:	f04f 34ff 	mov.w	r4, #4294967295
 8002d44:	4620      	mov	r0, r4
 8002d46:	bd70      	pop	{r4, r5, r6, pc}
 8002d48:	20000398 	.word	0x20000398

08002d4c <_malloc_r>:
 8002d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d50:	1ccd      	adds	r5, r1, #3
 8002d52:	f025 0503 	bic.w	r5, r5, #3
 8002d56:	3508      	adds	r5, #8
 8002d58:	2d0c      	cmp	r5, #12
 8002d5a:	bf38      	it	cc
 8002d5c:	250c      	movcc	r5, #12
 8002d5e:	2d00      	cmp	r5, #0
 8002d60:	4607      	mov	r7, r0
 8002d62:	db01      	blt.n	8002d68 <_malloc_r+0x1c>
 8002d64:	42a9      	cmp	r1, r5
 8002d66:	d905      	bls.n	8002d74 <_malloc_r+0x28>
 8002d68:	230c      	movs	r3, #12
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	603b      	str	r3, [r7, #0]
 8002d6e:	4630      	mov	r0, r6
 8002d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002d74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002e48 <_malloc_r+0xfc>
 8002d78:	f000 f868 	bl	8002e4c <__malloc_lock>
 8002d7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002d80:	461c      	mov	r4, r3
 8002d82:	bb5c      	cbnz	r4, 8002ddc <_malloc_r+0x90>
 8002d84:	4629      	mov	r1, r5
 8002d86:	4638      	mov	r0, r7
 8002d88:	f7ff ffc0 	bl	8002d0c <sbrk_aligned>
 8002d8c:	1c43      	adds	r3, r0, #1
 8002d8e:	4604      	mov	r4, r0
 8002d90:	d155      	bne.n	8002e3e <_malloc_r+0xf2>
 8002d92:	f8d8 4000 	ldr.w	r4, [r8]
 8002d96:	4626      	mov	r6, r4
 8002d98:	2e00      	cmp	r6, #0
 8002d9a:	d145      	bne.n	8002e28 <_malloc_r+0xdc>
 8002d9c:	2c00      	cmp	r4, #0
 8002d9e:	d048      	beq.n	8002e32 <_malloc_r+0xe6>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	4631      	mov	r1, r6
 8002da4:	4638      	mov	r0, r7
 8002da6:	eb04 0903 	add.w	r9, r4, r3
 8002daa:	f000 fb61 	bl	8003470 <_sbrk_r>
 8002dae:	4581      	cmp	r9, r0
 8002db0:	d13f      	bne.n	8002e32 <_malloc_r+0xe6>
 8002db2:	6821      	ldr	r1, [r4, #0]
 8002db4:	4638      	mov	r0, r7
 8002db6:	1a6d      	subs	r5, r5, r1
 8002db8:	4629      	mov	r1, r5
 8002dba:	f7ff ffa7 	bl	8002d0c <sbrk_aligned>
 8002dbe:	3001      	adds	r0, #1
 8002dc0:	d037      	beq.n	8002e32 <_malloc_r+0xe6>
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	442b      	add	r3, r5
 8002dc6:	6023      	str	r3, [r4, #0]
 8002dc8:	f8d8 3000 	ldr.w	r3, [r8]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d038      	beq.n	8002e42 <_malloc_r+0xf6>
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	42a2      	cmp	r2, r4
 8002dd4:	d12b      	bne.n	8002e2e <_malloc_r+0xe2>
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e00f      	b.n	8002dfc <_malloc_r+0xb0>
 8002ddc:	6822      	ldr	r2, [r4, #0]
 8002dde:	1b52      	subs	r2, r2, r5
 8002de0:	d41f      	bmi.n	8002e22 <_malloc_r+0xd6>
 8002de2:	2a0b      	cmp	r2, #11
 8002de4:	d917      	bls.n	8002e16 <_malloc_r+0xca>
 8002de6:	1961      	adds	r1, r4, r5
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	6025      	str	r5, [r4, #0]
 8002dec:	bf18      	it	ne
 8002dee:	6059      	strne	r1, [r3, #4]
 8002df0:	6863      	ldr	r3, [r4, #4]
 8002df2:	bf08      	it	eq
 8002df4:	f8c8 1000 	streq.w	r1, [r8]
 8002df8:	5162      	str	r2, [r4, r5]
 8002dfa:	604b      	str	r3, [r1, #4]
 8002dfc:	4638      	mov	r0, r7
 8002dfe:	f104 060b 	add.w	r6, r4, #11
 8002e02:	f000 f829 	bl	8002e58 <__malloc_unlock>
 8002e06:	f026 0607 	bic.w	r6, r6, #7
 8002e0a:	1d23      	adds	r3, r4, #4
 8002e0c:	1af2      	subs	r2, r6, r3
 8002e0e:	d0ae      	beq.n	8002d6e <_malloc_r+0x22>
 8002e10:	1b9b      	subs	r3, r3, r6
 8002e12:	50a3      	str	r3, [r4, r2]
 8002e14:	e7ab      	b.n	8002d6e <_malloc_r+0x22>
 8002e16:	42a3      	cmp	r3, r4
 8002e18:	6862      	ldr	r2, [r4, #4]
 8002e1a:	d1dd      	bne.n	8002dd8 <_malloc_r+0x8c>
 8002e1c:	f8c8 2000 	str.w	r2, [r8]
 8002e20:	e7ec      	b.n	8002dfc <_malloc_r+0xb0>
 8002e22:	4623      	mov	r3, r4
 8002e24:	6864      	ldr	r4, [r4, #4]
 8002e26:	e7ac      	b.n	8002d82 <_malloc_r+0x36>
 8002e28:	4634      	mov	r4, r6
 8002e2a:	6876      	ldr	r6, [r6, #4]
 8002e2c:	e7b4      	b.n	8002d98 <_malloc_r+0x4c>
 8002e2e:	4613      	mov	r3, r2
 8002e30:	e7cc      	b.n	8002dcc <_malloc_r+0x80>
 8002e32:	230c      	movs	r3, #12
 8002e34:	4638      	mov	r0, r7
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	f000 f80e 	bl	8002e58 <__malloc_unlock>
 8002e3c:	e797      	b.n	8002d6e <_malloc_r+0x22>
 8002e3e:	6025      	str	r5, [r4, #0]
 8002e40:	e7dc      	b.n	8002dfc <_malloc_r+0xb0>
 8002e42:	605b      	str	r3, [r3, #4]
 8002e44:	deff      	udf	#255	; 0xff
 8002e46:	bf00      	nop
 8002e48:	20000394 	.word	0x20000394

08002e4c <__malloc_lock>:
 8002e4c:	4801      	ldr	r0, [pc, #4]	; (8002e54 <__malloc_lock+0x8>)
 8002e4e:	f7ff bf13 	b.w	8002c78 <__retarget_lock_acquire_recursive>
 8002e52:	bf00      	nop
 8002e54:	20000390 	.word	0x20000390

08002e58 <__malloc_unlock>:
 8002e58:	4801      	ldr	r0, [pc, #4]	; (8002e60 <__malloc_unlock+0x8>)
 8002e5a:	f7ff bf0e 	b.w	8002c7a <__retarget_lock_release_recursive>
 8002e5e:	bf00      	nop
 8002e60:	20000390 	.word	0x20000390

08002e64 <__ssputs_r>:
 8002e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e68:	461f      	mov	r7, r3
 8002e6a:	688e      	ldr	r6, [r1, #8]
 8002e6c:	4682      	mov	sl, r0
 8002e6e:	42be      	cmp	r6, r7
 8002e70:	460c      	mov	r4, r1
 8002e72:	4690      	mov	r8, r2
 8002e74:	680b      	ldr	r3, [r1, #0]
 8002e76:	d82c      	bhi.n	8002ed2 <__ssputs_r+0x6e>
 8002e78:	898a      	ldrh	r2, [r1, #12]
 8002e7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e7e:	d026      	beq.n	8002ece <__ssputs_r+0x6a>
 8002e80:	6965      	ldr	r5, [r4, #20]
 8002e82:	6909      	ldr	r1, [r1, #16]
 8002e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e88:	eba3 0901 	sub.w	r9, r3, r1
 8002e8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e90:	1c7b      	adds	r3, r7, #1
 8002e92:	444b      	add	r3, r9
 8002e94:	106d      	asrs	r5, r5, #1
 8002e96:	429d      	cmp	r5, r3
 8002e98:	bf38      	it	cc
 8002e9a:	461d      	movcc	r5, r3
 8002e9c:	0553      	lsls	r3, r2, #21
 8002e9e:	d527      	bpl.n	8002ef0 <__ssputs_r+0x8c>
 8002ea0:	4629      	mov	r1, r5
 8002ea2:	f7ff ff53 	bl	8002d4c <_malloc_r>
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	b360      	cbz	r0, 8002f04 <__ssputs_r+0xa0>
 8002eaa:	464a      	mov	r2, r9
 8002eac:	6921      	ldr	r1, [r4, #16]
 8002eae:	f000 fafd 	bl	80034ac <memcpy>
 8002eb2:	89a3      	ldrh	r3, [r4, #12]
 8002eb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002eb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ebc:	81a3      	strh	r3, [r4, #12]
 8002ebe:	6126      	str	r6, [r4, #16]
 8002ec0:	444e      	add	r6, r9
 8002ec2:	6026      	str	r6, [r4, #0]
 8002ec4:	463e      	mov	r6, r7
 8002ec6:	6165      	str	r5, [r4, #20]
 8002ec8:	eba5 0509 	sub.w	r5, r5, r9
 8002ecc:	60a5      	str	r5, [r4, #8]
 8002ece:	42be      	cmp	r6, r7
 8002ed0:	d900      	bls.n	8002ed4 <__ssputs_r+0x70>
 8002ed2:	463e      	mov	r6, r7
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	4641      	mov	r1, r8
 8002ed8:	6820      	ldr	r0, [r4, #0]
 8002eda:	f000 faaf 	bl	800343c <memmove>
 8002ede:	2000      	movs	r0, #0
 8002ee0:	68a3      	ldr	r3, [r4, #8]
 8002ee2:	1b9b      	subs	r3, r3, r6
 8002ee4:	60a3      	str	r3, [r4, #8]
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	4433      	add	r3, r6
 8002eea:	6023      	str	r3, [r4, #0]
 8002eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef0:	462a      	mov	r2, r5
 8002ef2:	f000 fae9 	bl	80034c8 <_realloc_r>
 8002ef6:	4606      	mov	r6, r0
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d1e0      	bne.n	8002ebe <__ssputs_r+0x5a>
 8002efc:	4650      	mov	r0, sl
 8002efe:	6921      	ldr	r1, [r4, #16]
 8002f00:	f7ff febc 	bl	8002c7c <_free_r>
 8002f04:	230c      	movs	r3, #12
 8002f06:	f8ca 3000 	str.w	r3, [sl]
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f14:	81a3      	strh	r3, [r4, #12]
 8002f16:	e7e9      	b.n	8002eec <__ssputs_r+0x88>

08002f18 <_svfiprintf_r>:
 8002f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1c:	4698      	mov	r8, r3
 8002f1e:	898b      	ldrh	r3, [r1, #12]
 8002f20:	4607      	mov	r7, r0
 8002f22:	061b      	lsls	r3, r3, #24
 8002f24:	460d      	mov	r5, r1
 8002f26:	4614      	mov	r4, r2
 8002f28:	b09d      	sub	sp, #116	; 0x74
 8002f2a:	d50e      	bpl.n	8002f4a <_svfiprintf_r+0x32>
 8002f2c:	690b      	ldr	r3, [r1, #16]
 8002f2e:	b963      	cbnz	r3, 8002f4a <_svfiprintf_r+0x32>
 8002f30:	2140      	movs	r1, #64	; 0x40
 8002f32:	f7ff ff0b 	bl	8002d4c <_malloc_r>
 8002f36:	6028      	str	r0, [r5, #0]
 8002f38:	6128      	str	r0, [r5, #16]
 8002f3a:	b920      	cbnz	r0, 8002f46 <_svfiprintf_r+0x2e>
 8002f3c:	230c      	movs	r3, #12
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	f04f 30ff 	mov.w	r0, #4294967295
 8002f44:	e0d0      	b.n	80030e8 <_svfiprintf_r+0x1d0>
 8002f46:	2340      	movs	r3, #64	; 0x40
 8002f48:	616b      	str	r3, [r5, #20]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4e:	2320      	movs	r3, #32
 8002f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f54:	2330      	movs	r3, #48	; 0x30
 8002f56:	f04f 0901 	mov.w	r9, #1
 8002f5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8002f5e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8003100 <_svfiprintf_r+0x1e8>
 8002f62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f66:	4623      	mov	r3, r4
 8002f68:	469a      	mov	sl, r3
 8002f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002f6e:	b10a      	cbz	r2, 8002f74 <_svfiprintf_r+0x5c>
 8002f70:	2a25      	cmp	r2, #37	; 0x25
 8002f72:	d1f9      	bne.n	8002f68 <_svfiprintf_r+0x50>
 8002f74:	ebba 0b04 	subs.w	fp, sl, r4
 8002f78:	d00b      	beq.n	8002f92 <_svfiprintf_r+0x7a>
 8002f7a:	465b      	mov	r3, fp
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	4629      	mov	r1, r5
 8002f80:	4638      	mov	r0, r7
 8002f82:	f7ff ff6f 	bl	8002e64 <__ssputs_r>
 8002f86:	3001      	adds	r0, #1
 8002f88:	f000 80a9 	beq.w	80030de <_svfiprintf_r+0x1c6>
 8002f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f8e:	445a      	add	r2, fp
 8002f90:	9209      	str	r2, [sp, #36]	; 0x24
 8002f92:	f89a 3000 	ldrb.w	r3, [sl]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80a1 	beq.w	80030de <_svfiprintf_r+0x1c6>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fa6:	f10a 0a01 	add.w	sl, sl, #1
 8002faa:	9304      	str	r3, [sp, #16]
 8002fac:	9307      	str	r3, [sp, #28]
 8002fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8002fb4:	4654      	mov	r4, sl
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fbc:	4850      	ldr	r0, [pc, #320]	; (8003100 <_svfiprintf_r+0x1e8>)
 8002fbe:	f000 fa67 	bl	8003490 <memchr>
 8002fc2:	9a04      	ldr	r2, [sp, #16]
 8002fc4:	b9d8      	cbnz	r0, 8002ffe <_svfiprintf_r+0xe6>
 8002fc6:	06d0      	lsls	r0, r2, #27
 8002fc8:	bf44      	itt	mi
 8002fca:	2320      	movmi	r3, #32
 8002fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fd0:	0711      	lsls	r1, r2, #28
 8002fd2:	bf44      	itt	mi
 8002fd4:	232b      	movmi	r3, #43	; 0x2b
 8002fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002fda:	f89a 3000 	ldrb.w	r3, [sl]
 8002fde:	2b2a      	cmp	r3, #42	; 0x2a
 8002fe0:	d015      	beq.n	800300e <_svfiprintf_r+0xf6>
 8002fe2:	4654      	mov	r4, sl
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f04f 0c0a 	mov.w	ip, #10
 8002fea:	9a07      	ldr	r2, [sp, #28]
 8002fec:	4621      	mov	r1, r4
 8002fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ff2:	3b30      	subs	r3, #48	; 0x30
 8002ff4:	2b09      	cmp	r3, #9
 8002ff6:	d94d      	bls.n	8003094 <_svfiprintf_r+0x17c>
 8002ff8:	b1b0      	cbz	r0, 8003028 <_svfiprintf_r+0x110>
 8002ffa:	9207      	str	r2, [sp, #28]
 8002ffc:	e014      	b.n	8003028 <_svfiprintf_r+0x110>
 8002ffe:	eba0 0308 	sub.w	r3, r0, r8
 8003002:	fa09 f303 	lsl.w	r3, r9, r3
 8003006:	4313      	orrs	r3, r2
 8003008:	46a2      	mov	sl, r4
 800300a:	9304      	str	r3, [sp, #16]
 800300c:	e7d2      	b.n	8002fb4 <_svfiprintf_r+0x9c>
 800300e:	9b03      	ldr	r3, [sp, #12]
 8003010:	1d19      	adds	r1, r3, #4
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	9103      	str	r1, [sp, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	bfbb      	ittet	lt
 800301a:	425b      	neglt	r3, r3
 800301c:	f042 0202 	orrlt.w	r2, r2, #2
 8003020:	9307      	strge	r3, [sp, #28]
 8003022:	9307      	strlt	r3, [sp, #28]
 8003024:	bfb8      	it	lt
 8003026:	9204      	strlt	r2, [sp, #16]
 8003028:	7823      	ldrb	r3, [r4, #0]
 800302a:	2b2e      	cmp	r3, #46	; 0x2e
 800302c:	d10c      	bne.n	8003048 <_svfiprintf_r+0x130>
 800302e:	7863      	ldrb	r3, [r4, #1]
 8003030:	2b2a      	cmp	r3, #42	; 0x2a
 8003032:	d134      	bne.n	800309e <_svfiprintf_r+0x186>
 8003034:	9b03      	ldr	r3, [sp, #12]
 8003036:	3402      	adds	r4, #2
 8003038:	1d1a      	adds	r2, r3, #4
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	9203      	str	r2, [sp, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	bfb8      	it	lt
 8003042:	f04f 33ff 	movlt.w	r3, #4294967295
 8003046:	9305      	str	r3, [sp, #20]
 8003048:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8003104 <_svfiprintf_r+0x1ec>
 800304c:	2203      	movs	r2, #3
 800304e:	4650      	mov	r0, sl
 8003050:	7821      	ldrb	r1, [r4, #0]
 8003052:	f000 fa1d 	bl	8003490 <memchr>
 8003056:	b138      	cbz	r0, 8003068 <_svfiprintf_r+0x150>
 8003058:	2240      	movs	r2, #64	; 0x40
 800305a:	9b04      	ldr	r3, [sp, #16]
 800305c:	eba0 000a 	sub.w	r0, r0, sl
 8003060:	4082      	lsls	r2, r0
 8003062:	4313      	orrs	r3, r2
 8003064:	3401      	adds	r4, #1
 8003066:	9304      	str	r3, [sp, #16]
 8003068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800306c:	2206      	movs	r2, #6
 800306e:	4826      	ldr	r0, [pc, #152]	; (8003108 <_svfiprintf_r+0x1f0>)
 8003070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003074:	f000 fa0c 	bl	8003490 <memchr>
 8003078:	2800      	cmp	r0, #0
 800307a:	d038      	beq.n	80030ee <_svfiprintf_r+0x1d6>
 800307c:	4b23      	ldr	r3, [pc, #140]	; (800310c <_svfiprintf_r+0x1f4>)
 800307e:	bb1b      	cbnz	r3, 80030c8 <_svfiprintf_r+0x1b0>
 8003080:	9b03      	ldr	r3, [sp, #12]
 8003082:	3307      	adds	r3, #7
 8003084:	f023 0307 	bic.w	r3, r3, #7
 8003088:	3308      	adds	r3, #8
 800308a:	9303      	str	r3, [sp, #12]
 800308c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800308e:	4433      	add	r3, r6
 8003090:	9309      	str	r3, [sp, #36]	; 0x24
 8003092:	e768      	b.n	8002f66 <_svfiprintf_r+0x4e>
 8003094:	460c      	mov	r4, r1
 8003096:	2001      	movs	r0, #1
 8003098:	fb0c 3202 	mla	r2, ip, r2, r3
 800309c:	e7a6      	b.n	8002fec <_svfiprintf_r+0xd4>
 800309e:	2300      	movs	r3, #0
 80030a0:	f04f 0c0a 	mov.w	ip, #10
 80030a4:	4619      	mov	r1, r3
 80030a6:	3401      	adds	r4, #1
 80030a8:	9305      	str	r3, [sp, #20]
 80030aa:	4620      	mov	r0, r4
 80030ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030b0:	3a30      	subs	r2, #48	; 0x30
 80030b2:	2a09      	cmp	r2, #9
 80030b4:	d903      	bls.n	80030be <_svfiprintf_r+0x1a6>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0c6      	beq.n	8003048 <_svfiprintf_r+0x130>
 80030ba:	9105      	str	r1, [sp, #20]
 80030bc:	e7c4      	b.n	8003048 <_svfiprintf_r+0x130>
 80030be:	4604      	mov	r4, r0
 80030c0:	2301      	movs	r3, #1
 80030c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80030c6:	e7f0      	b.n	80030aa <_svfiprintf_r+0x192>
 80030c8:	ab03      	add	r3, sp, #12
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	462a      	mov	r2, r5
 80030ce:	4638      	mov	r0, r7
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <_svfiprintf_r+0x1f8>)
 80030d2:	a904      	add	r1, sp, #16
 80030d4:	f3af 8000 	nop.w
 80030d8:	1c42      	adds	r2, r0, #1
 80030da:	4606      	mov	r6, r0
 80030dc:	d1d6      	bne.n	800308c <_svfiprintf_r+0x174>
 80030de:	89ab      	ldrh	r3, [r5, #12]
 80030e0:	065b      	lsls	r3, r3, #25
 80030e2:	f53f af2d 	bmi.w	8002f40 <_svfiprintf_r+0x28>
 80030e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030e8:	b01d      	add	sp, #116	; 0x74
 80030ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ee:	ab03      	add	r3, sp, #12
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	462a      	mov	r2, r5
 80030f4:	4638      	mov	r0, r7
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <_svfiprintf_r+0x1f8>)
 80030f8:	a904      	add	r1, sp, #16
 80030fa:	f000 f87d 	bl	80031f8 <_printf_i>
 80030fe:	e7eb      	b.n	80030d8 <_svfiprintf_r+0x1c0>
 8003100:	08003592 	.word	0x08003592
 8003104:	08003598 	.word	0x08003598
 8003108:	0800359c 	.word	0x0800359c
 800310c:	00000000 	.word	0x00000000
 8003110:	08002e65 	.word	0x08002e65

08003114 <_printf_common>:
 8003114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003118:	4616      	mov	r6, r2
 800311a:	4699      	mov	r9, r3
 800311c:	688a      	ldr	r2, [r1, #8]
 800311e:	690b      	ldr	r3, [r1, #16]
 8003120:	4607      	mov	r7, r0
 8003122:	4293      	cmp	r3, r2
 8003124:	bfb8      	it	lt
 8003126:	4613      	movlt	r3, r2
 8003128:	6033      	str	r3, [r6, #0]
 800312a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800312e:	460c      	mov	r4, r1
 8003130:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003134:	b10a      	cbz	r2, 800313a <_printf_common+0x26>
 8003136:	3301      	adds	r3, #1
 8003138:	6033      	str	r3, [r6, #0]
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	0699      	lsls	r1, r3, #26
 800313e:	bf42      	ittt	mi
 8003140:	6833      	ldrmi	r3, [r6, #0]
 8003142:	3302      	addmi	r3, #2
 8003144:	6033      	strmi	r3, [r6, #0]
 8003146:	6825      	ldr	r5, [r4, #0]
 8003148:	f015 0506 	ands.w	r5, r5, #6
 800314c:	d106      	bne.n	800315c <_printf_common+0x48>
 800314e:	f104 0a19 	add.w	sl, r4, #25
 8003152:	68e3      	ldr	r3, [r4, #12]
 8003154:	6832      	ldr	r2, [r6, #0]
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	42ab      	cmp	r3, r5
 800315a:	dc2b      	bgt.n	80031b4 <_printf_common+0xa0>
 800315c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003160:	1e13      	subs	r3, r2, #0
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	bf18      	it	ne
 8003166:	2301      	movne	r3, #1
 8003168:	0692      	lsls	r2, r2, #26
 800316a:	d430      	bmi.n	80031ce <_printf_common+0xba>
 800316c:	4649      	mov	r1, r9
 800316e:	4638      	mov	r0, r7
 8003170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003174:	47c0      	blx	r8
 8003176:	3001      	adds	r0, #1
 8003178:	d023      	beq.n	80031c2 <_printf_common+0xae>
 800317a:	6823      	ldr	r3, [r4, #0]
 800317c:	6922      	ldr	r2, [r4, #16]
 800317e:	f003 0306 	and.w	r3, r3, #6
 8003182:	2b04      	cmp	r3, #4
 8003184:	bf14      	ite	ne
 8003186:	2500      	movne	r5, #0
 8003188:	6833      	ldreq	r3, [r6, #0]
 800318a:	f04f 0600 	mov.w	r6, #0
 800318e:	bf08      	it	eq
 8003190:	68e5      	ldreq	r5, [r4, #12]
 8003192:	f104 041a 	add.w	r4, r4, #26
 8003196:	bf08      	it	eq
 8003198:	1aed      	subeq	r5, r5, r3
 800319a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800319e:	bf08      	it	eq
 80031a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80031a4:	4293      	cmp	r3, r2
 80031a6:	bfc4      	itt	gt
 80031a8:	1a9b      	subgt	r3, r3, r2
 80031aa:	18ed      	addgt	r5, r5, r3
 80031ac:	42b5      	cmp	r5, r6
 80031ae:	d11a      	bne.n	80031e6 <_printf_common+0xd2>
 80031b0:	2000      	movs	r0, #0
 80031b2:	e008      	b.n	80031c6 <_printf_common+0xb2>
 80031b4:	2301      	movs	r3, #1
 80031b6:	4652      	mov	r2, sl
 80031b8:	4649      	mov	r1, r9
 80031ba:	4638      	mov	r0, r7
 80031bc:	47c0      	blx	r8
 80031be:	3001      	adds	r0, #1
 80031c0:	d103      	bne.n	80031ca <_printf_common+0xb6>
 80031c2:	f04f 30ff 	mov.w	r0, #4294967295
 80031c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ca:	3501      	adds	r5, #1
 80031cc:	e7c1      	b.n	8003152 <_printf_common+0x3e>
 80031ce:	2030      	movs	r0, #48	; 0x30
 80031d0:	18e1      	adds	r1, r4, r3
 80031d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031dc:	4422      	add	r2, r4
 80031de:	3302      	adds	r3, #2
 80031e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031e4:	e7c2      	b.n	800316c <_printf_common+0x58>
 80031e6:	2301      	movs	r3, #1
 80031e8:	4622      	mov	r2, r4
 80031ea:	4649      	mov	r1, r9
 80031ec:	4638      	mov	r0, r7
 80031ee:	47c0      	blx	r8
 80031f0:	3001      	adds	r0, #1
 80031f2:	d0e6      	beq.n	80031c2 <_printf_common+0xae>
 80031f4:	3601      	adds	r6, #1
 80031f6:	e7d9      	b.n	80031ac <_printf_common+0x98>

080031f8 <_printf_i>:
 80031f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031fc:	7e0f      	ldrb	r7, [r1, #24]
 80031fe:	4691      	mov	r9, r2
 8003200:	2f78      	cmp	r7, #120	; 0x78
 8003202:	4680      	mov	r8, r0
 8003204:	460c      	mov	r4, r1
 8003206:	469a      	mov	sl, r3
 8003208:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800320a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800320e:	d807      	bhi.n	8003220 <_printf_i+0x28>
 8003210:	2f62      	cmp	r7, #98	; 0x62
 8003212:	d80a      	bhi.n	800322a <_printf_i+0x32>
 8003214:	2f00      	cmp	r7, #0
 8003216:	f000 80d5 	beq.w	80033c4 <_printf_i+0x1cc>
 800321a:	2f58      	cmp	r7, #88	; 0x58
 800321c:	f000 80c1 	beq.w	80033a2 <_printf_i+0x1aa>
 8003220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003228:	e03a      	b.n	80032a0 <_printf_i+0xa8>
 800322a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800322e:	2b15      	cmp	r3, #21
 8003230:	d8f6      	bhi.n	8003220 <_printf_i+0x28>
 8003232:	a101      	add	r1, pc, #4	; (adr r1, 8003238 <_printf_i+0x40>)
 8003234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003238:	08003291 	.word	0x08003291
 800323c:	080032a5 	.word	0x080032a5
 8003240:	08003221 	.word	0x08003221
 8003244:	08003221 	.word	0x08003221
 8003248:	08003221 	.word	0x08003221
 800324c:	08003221 	.word	0x08003221
 8003250:	080032a5 	.word	0x080032a5
 8003254:	08003221 	.word	0x08003221
 8003258:	08003221 	.word	0x08003221
 800325c:	08003221 	.word	0x08003221
 8003260:	08003221 	.word	0x08003221
 8003264:	080033ab 	.word	0x080033ab
 8003268:	080032d1 	.word	0x080032d1
 800326c:	08003365 	.word	0x08003365
 8003270:	08003221 	.word	0x08003221
 8003274:	08003221 	.word	0x08003221
 8003278:	080033cd 	.word	0x080033cd
 800327c:	08003221 	.word	0x08003221
 8003280:	080032d1 	.word	0x080032d1
 8003284:	08003221 	.word	0x08003221
 8003288:	08003221 	.word	0x08003221
 800328c:	0800336d 	.word	0x0800336d
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	1d1a      	adds	r2, r3, #4
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	602a      	str	r2, [r5, #0]
 8003298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800329c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0a0      	b.n	80033e6 <_printf_i+0x1ee>
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	682b      	ldr	r3, [r5, #0]
 80032a8:	0607      	lsls	r7, r0, #24
 80032aa:	f103 0104 	add.w	r1, r3, #4
 80032ae:	6029      	str	r1, [r5, #0]
 80032b0:	d501      	bpl.n	80032b6 <_printf_i+0xbe>
 80032b2:	681e      	ldr	r6, [r3, #0]
 80032b4:	e003      	b.n	80032be <_printf_i+0xc6>
 80032b6:	0646      	lsls	r6, r0, #25
 80032b8:	d5fb      	bpl.n	80032b2 <_printf_i+0xba>
 80032ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80032be:	2e00      	cmp	r6, #0
 80032c0:	da03      	bge.n	80032ca <_printf_i+0xd2>
 80032c2:	232d      	movs	r3, #45	; 0x2d
 80032c4:	4276      	negs	r6, r6
 80032c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80032ca:	230a      	movs	r3, #10
 80032cc:	4859      	ldr	r0, [pc, #356]	; (8003434 <_printf_i+0x23c>)
 80032ce:	e012      	b.n	80032f6 <_printf_i+0xfe>
 80032d0:	682b      	ldr	r3, [r5, #0]
 80032d2:	6820      	ldr	r0, [r4, #0]
 80032d4:	1d19      	adds	r1, r3, #4
 80032d6:	6029      	str	r1, [r5, #0]
 80032d8:	0605      	lsls	r5, r0, #24
 80032da:	d501      	bpl.n	80032e0 <_printf_i+0xe8>
 80032dc:	681e      	ldr	r6, [r3, #0]
 80032de:	e002      	b.n	80032e6 <_printf_i+0xee>
 80032e0:	0641      	lsls	r1, r0, #25
 80032e2:	d5fb      	bpl.n	80032dc <_printf_i+0xe4>
 80032e4:	881e      	ldrh	r6, [r3, #0]
 80032e6:	2f6f      	cmp	r7, #111	; 0x6f
 80032e8:	bf0c      	ite	eq
 80032ea:	2308      	moveq	r3, #8
 80032ec:	230a      	movne	r3, #10
 80032ee:	4851      	ldr	r0, [pc, #324]	; (8003434 <_printf_i+0x23c>)
 80032f0:	2100      	movs	r1, #0
 80032f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032f6:	6865      	ldr	r5, [r4, #4]
 80032f8:	2d00      	cmp	r5, #0
 80032fa:	bfa8      	it	ge
 80032fc:	6821      	ldrge	r1, [r4, #0]
 80032fe:	60a5      	str	r5, [r4, #8]
 8003300:	bfa4      	itt	ge
 8003302:	f021 0104 	bicge.w	r1, r1, #4
 8003306:	6021      	strge	r1, [r4, #0]
 8003308:	b90e      	cbnz	r6, 800330e <_printf_i+0x116>
 800330a:	2d00      	cmp	r5, #0
 800330c:	d04b      	beq.n	80033a6 <_printf_i+0x1ae>
 800330e:	4615      	mov	r5, r2
 8003310:	fbb6 f1f3 	udiv	r1, r6, r3
 8003314:	fb03 6711 	mls	r7, r3, r1, r6
 8003318:	5dc7      	ldrb	r7, [r0, r7]
 800331a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800331e:	4637      	mov	r7, r6
 8003320:	42bb      	cmp	r3, r7
 8003322:	460e      	mov	r6, r1
 8003324:	d9f4      	bls.n	8003310 <_printf_i+0x118>
 8003326:	2b08      	cmp	r3, #8
 8003328:	d10b      	bne.n	8003342 <_printf_i+0x14a>
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	07de      	lsls	r6, r3, #31
 800332e:	d508      	bpl.n	8003342 <_printf_i+0x14a>
 8003330:	6923      	ldr	r3, [r4, #16]
 8003332:	6861      	ldr	r1, [r4, #4]
 8003334:	4299      	cmp	r1, r3
 8003336:	bfde      	ittt	le
 8003338:	2330      	movle	r3, #48	; 0x30
 800333a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800333e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003342:	1b52      	subs	r2, r2, r5
 8003344:	6122      	str	r2, [r4, #16]
 8003346:	464b      	mov	r3, r9
 8003348:	4621      	mov	r1, r4
 800334a:	4640      	mov	r0, r8
 800334c:	f8cd a000 	str.w	sl, [sp]
 8003350:	aa03      	add	r2, sp, #12
 8003352:	f7ff fedf 	bl	8003114 <_printf_common>
 8003356:	3001      	adds	r0, #1
 8003358:	d14a      	bne.n	80033f0 <_printf_i+0x1f8>
 800335a:	f04f 30ff 	mov.w	r0, #4294967295
 800335e:	b004      	add	sp, #16
 8003360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003364:	6823      	ldr	r3, [r4, #0]
 8003366:	f043 0320 	orr.w	r3, r3, #32
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	2778      	movs	r7, #120	; 0x78
 800336e:	4832      	ldr	r0, [pc, #200]	; (8003438 <_printf_i+0x240>)
 8003370:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003374:	6823      	ldr	r3, [r4, #0]
 8003376:	6829      	ldr	r1, [r5, #0]
 8003378:	061f      	lsls	r7, r3, #24
 800337a:	f851 6b04 	ldr.w	r6, [r1], #4
 800337e:	d402      	bmi.n	8003386 <_printf_i+0x18e>
 8003380:	065f      	lsls	r7, r3, #25
 8003382:	bf48      	it	mi
 8003384:	b2b6      	uxthmi	r6, r6
 8003386:	07df      	lsls	r7, r3, #31
 8003388:	bf48      	it	mi
 800338a:	f043 0320 	orrmi.w	r3, r3, #32
 800338e:	6029      	str	r1, [r5, #0]
 8003390:	bf48      	it	mi
 8003392:	6023      	strmi	r3, [r4, #0]
 8003394:	b91e      	cbnz	r6, 800339e <_printf_i+0x1a6>
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	f023 0320 	bic.w	r3, r3, #32
 800339c:	6023      	str	r3, [r4, #0]
 800339e:	2310      	movs	r3, #16
 80033a0:	e7a6      	b.n	80032f0 <_printf_i+0xf8>
 80033a2:	4824      	ldr	r0, [pc, #144]	; (8003434 <_printf_i+0x23c>)
 80033a4:	e7e4      	b.n	8003370 <_printf_i+0x178>
 80033a6:	4615      	mov	r5, r2
 80033a8:	e7bd      	b.n	8003326 <_printf_i+0x12e>
 80033aa:	682b      	ldr	r3, [r5, #0]
 80033ac:	6826      	ldr	r6, [r4, #0]
 80033ae:	1d18      	adds	r0, r3, #4
 80033b0:	6961      	ldr	r1, [r4, #20]
 80033b2:	6028      	str	r0, [r5, #0]
 80033b4:	0635      	lsls	r5, r6, #24
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	d501      	bpl.n	80033be <_printf_i+0x1c6>
 80033ba:	6019      	str	r1, [r3, #0]
 80033bc:	e002      	b.n	80033c4 <_printf_i+0x1cc>
 80033be:	0670      	lsls	r0, r6, #25
 80033c0:	d5fb      	bpl.n	80033ba <_printf_i+0x1c2>
 80033c2:	8019      	strh	r1, [r3, #0]
 80033c4:	2300      	movs	r3, #0
 80033c6:	4615      	mov	r5, r2
 80033c8:	6123      	str	r3, [r4, #16]
 80033ca:	e7bc      	b.n	8003346 <_printf_i+0x14e>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	2100      	movs	r1, #0
 80033d0:	1d1a      	adds	r2, r3, #4
 80033d2:	602a      	str	r2, [r5, #0]
 80033d4:	681d      	ldr	r5, [r3, #0]
 80033d6:	6862      	ldr	r2, [r4, #4]
 80033d8:	4628      	mov	r0, r5
 80033da:	f000 f859 	bl	8003490 <memchr>
 80033de:	b108      	cbz	r0, 80033e4 <_printf_i+0x1ec>
 80033e0:	1b40      	subs	r0, r0, r5
 80033e2:	6060      	str	r0, [r4, #4]
 80033e4:	6863      	ldr	r3, [r4, #4]
 80033e6:	6123      	str	r3, [r4, #16]
 80033e8:	2300      	movs	r3, #0
 80033ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033ee:	e7aa      	b.n	8003346 <_printf_i+0x14e>
 80033f0:	462a      	mov	r2, r5
 80033f2:	4649      	mov	r1, r9
 80033f4:	4640      	mov	r0, r8
 80033f6:	6923      	ldr	r3, [r4, #16]
 80033f8:	47d0      	blx	sl
 80033fa:	3001      	adds	r0, #1
 80033fc:	d0ad      	beq.n	800335a <_printf_i+0x162>
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	079b      	lsls	r3, r3, #30
 8003402:	d413      	bmi.n	800342c <_printf_i+0x234>
 8003404:	68e0      	ldr	r0, [r4, #12]
 8003406:	9b03      	ldr	r3, [sp, #12]
 8003408:	4298      	cmp	r0, r3
 800340a:	bfb8      	it	lt
 800340c:	4618      	movlt	r0, r3
 800340e:	e7a6      	b.n	800335e <_printf_i+0x166>
 8003410:	2301      	movs	r3, #1
 8003412:	4632      	mov	r2, r6
 8003414:	4649      	mov	r1, r9
 8003416:	4640      	mov	r0, r8
 8003418:	47d0      	blx	sl
 800341a:	3001      	adds	r0, #1
 800341c:	d09d      	beq.n	800335a <_printf_i+0x162>
 800341e:	3501      	adds	r5, #1
 8003420:	68e3      	ldr	r3, [r4, #12]
 8003422:	9903      	ldr	r1, [sp, #12]
 8003424:	1a5b      	subs	r3, r3, r1
 8003426:	42ab      	cmp	r3, r5
 8003428:	dcf2      	bgt.n	8003410 <_printf_i+0x218>
 800342a:	e7eb      	b.n	8003404 <_printf_i+0x20c>
 800342c:	2500      	movs	r5, #0
 800342e:	f104 0619 	add.w	r6, r4, #25
 8003432:	e7f5      	b.n	8003420 <_printf_i+0x228>
 8003434:	080035a3 	.word	0x080035a3
 8003438:	080035b4 	.word	0x080035b4

0800343c <memmove>:
 800343c:	4288      	cmp	r0, r1
 800343e:	b510      	push	{r4, lr}
 8003440:	eb01 0402 	add.w	r4, r1, r2
 8003444:	d902      	bls.n	800344c <memmove+0x10>
 8003446:	4284      	cmp	r4, r0
 8003448:	4623      	mov	r3, r4
 800344a:	d807      	bhi.n	800345c <memmove+0x20>
 800344c:	1e43      	subs	r3, r0, #1
 800344e:	42a1      	cmp	r1, r4
 8003450:	d008      	beq.n	8003464 <memmove+0x28>
 8003452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800345a:	e7f8      	b.n	800344e <memmove+0x12>
 800345c:	4601      	mov	r1, r0
 800345e:	4402      	add	r2, r0
 8003460:	428a      	cmp	r2, r1
 8003462:	d100      	bne.n	8003466 <memmove+0x2a>
 8003464:	bd10      	pop	{r4, pc}
 8003466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800346a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800346e:	e7f7      	b.n	8003460 <memmove+0x24>

08003470 <_sbrk_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	2300      	movs	r3, #0
 8003474:	4d05      	ldr	r5, [pc, #20]	; (800348c <_sbrk_r+0x1c>)
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	f7fd f80c 	bl	8000498 <_sbrk>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_sbrk_r+0x1a>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_sbrk_r+0x1a>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	2000038c 	.word	0x2000038c

08003490 <memchr>:
 8003490:	4603      	mov	r3, r0
 8003492:	b510      	push	{r4, lr}
 8003494:	b2c9      	uxtb	r1, r1
 8003496:	4402      	add	r2, r0
 8003498:	4293      	cmp	r3, r2
 800349a:	4618      	mov	r0, r3
 800349c:	d101      	bne.n	80034a2 <memchr+0x12>
 800349e:	2000      	movs	r0, #0
 80034a0:	e003      	b.n	80034aa <memchr+0x1a>
 80034a2:	7804      	ldrb	r4, [r0, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	428c      	cmp	r4, r1
 80034a8:	d1f6      	bne.n	8003498 <memchr+0x8>
 80034aa:	bd10      	pop	{r4, pc}

080034ac <memcpy>:
 80034ac:	440a      	add	r2, r1
 80034ae:	4291      	cmp	r1, r2
 80034b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80034b4:	d100      	bne.n	80034b8 <memcpy+0xc>
 80034b6:	4770      	bx	lr
 80034b8:	b510      	push	{r4, lr}
 80034ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034be:	4291      	cmp	r1, r2
 80034c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034c4:	d1f9      	bne.n	80034ba <memcpy+0xe>
 80034c6:	bd10      	pop	{r4, pc}

080034c8 <_realloc_r>:
 80034c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034cc:	4680      	mov	r8, r0
 80034ce:	4614      	mov	r4, r2
 80034d0:	460e      	mov	r6, r1
 80034d2:	b921      	cbnz	r1, 80034de <_realloc_r+0x16>
 80034d4:	4611      	mov	r1, r2
 80034d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80034da:	f7ff bc37 	b.w	8002d4c <_malloc_r>
 80034de:	b92a      	cbnz	r2, 80034ec <_realloc_r+0x24>
 80034e0:	f7ff fbcc 	bl	8002c7c <_free_r>
 80034e4:	4625      	mov	r5, r4
 80034e6:	4628      	mov	r0, r5
 80034e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ec:	f000 f81b 	bl	8003526 <_malloc_usable_size_r>
 80034f0:	4284      	cmp	r4, r0
 80034f2:	4607      	mov	r7, r0
 80034f4:	d802      	bhi.n	80034fc <_realloc_r+0x34>
 80034f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80034fa:	d812      	bhi.n	8003522 <_realloc_r+0x5a>
 80034fc:	4621      	mov	r1, r4
 80034fe:	4640      	mov	r0, r8
 8003500:	f7ff fc24 	bl	8002d4c <_malloc_r>
 8003504:	4605      	mov	r5, r0
 8003506:	2800      	cmp	r0, #0
 8003508:	d0ed      	beq.n	80034e6 <_realloc_r+0x1e>
 800350a:	42bc      	cmp	r4, r7
 800350c:	4622      	mov	r2, r4
 800350e:	4631      	mov	r1, r6
 8003510:	bf28      	it	cs
 8003512:	463a      	movcs	r2, r7
 8003514:	f7ff ffca 	bl	80034ac <memcpy>
 8003518:	4631      	mov	r1, r6
 800351a:	4640      	mov	r0, r8
 800351c:	f7ff fbae 	bl	8002c7c <_free_r>
 8003520:	e7e1      	b.n	80034e6 <_realloc_r+0x1e>
 8003522:	4635      	mov	r5, r6
 8003524:	e7df      	b.n	80034e6 <_realloc_r+0x1e>

08003526 <_malloc_usable_size_r>:
 8003526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800352a:	1f18      	subs	r0, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	bfbc      	itt	lt
 8003530:	580b      	ldrlt	r3, [r1, r0]
 8003532:	18c0      	addlt	r0, r0, r3
 8003534:	4770      	bx	lr
	...

08003538 <_init>:
 8003538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353a:	bf00      	nop
 800353c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800353e:	bc08      	pop	{r3}
 8003540:	469e      	mov	lr, r3
 8003542:	4770      	bx	lr

08003544 <_fini>:
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	bf00      	nop
 8003548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800354a:	bc08      	pop	{r3}
 800354c:	469e      	mov	lr, r3
 800354e:	4770      	bx	lr
